{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Williams\\\\Desktop\\\\App\\\\choice-voting-app\\\\src\\\\ElectionList.js\",\n    _s = $RefreshSig$();\n\nimport _ from \"lodash\";\nimport $ from \"jquery\";\nimport \"./styles/electionlist.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport algosdk from \"algosdk\";\nimport { ASSET_ID } from \"./constants\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ElectionList = () => {\n  _s();\n\n  var _localStorage$getItem;\n\n  const dispatch = useDispatch();\n  const addressNum = useSelector(state => state.status.addressNum);\n  const algodClient = new algosdk.Algodv2({\n    \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \"\n  }, \"https://testnet-algorand.api.purestake.io/ps2\", \"\");\n  const walletAddress = localStorage.getItem(\"address\");\n  const walletType = localStorage.getItem(\"wallet-type\");\n  const addresses = (_localStorage$getItem = localStorage.getItem(\"addresses\")) === null || _localStorage$getItem === void 0 ? void 0 : _localStorage$getItem.split(\",\");\n  const isThereAddress = localStorage.getItem(\"address\");\n  const data = [{\n    candidates: [{\n      address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n      image: \"\",\n      name: \"Yes\"\n    }, {\n      address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n      image: \"\",\n      name: \"No\"\n    }],\n    choice_per_vote: 1,\n    created_at: \"2021-12-08T10:32:15.878473\",\n    description: \"Lorem ipsum\",\n    is_finished: false,\n    is_started: true,\n    process_image: \"https://i.postimg.cc/90XSyrjH/choice.png\",\n    slug: \"is-choice-coin-the-best-b0c7db\",\n    title: \"Is Choice Coin the best?\",\n    wallet: {\n      address: \"NX4T2FTIGNPVPSMEXJFMMKD46O4HRCPN25BDHOUW2SWXANZPQBZEDYKDVE\"\n    }\n  }];\n\n  const myAlgoConnect = async voteData => {\n    const myAlgoWallet = new MyAlgoConnect();\n\n    try {\n      const accounts = await myAlgoWallet.connect({\n        shouldSelectOneAccount: true\n      });\n      const address = !!isThereAddress ? isThereAddress : accounts[0].address;\n      const myAccountInfo = await algodClient.accountInformation(!!isThereAddress ? isThereAddress : accounts[0].address).do(); // get balance of the voter\n\n      const balance = myAccountInfo.assets ? myAccountInfo.assets.find(element => element[\"asset-id\"] === ASSET_ID).amount / 100 : 0; // check if the voter address has Choice\n\n      const containsChoice = myAccountInfo.assets ? myAccountInfo.assets.some(element => element[\"asset-id\"] === ASSET_ID) : false; // if the address has no ASAs\n\n      if (myAccountInfo.assets.length === 0) {\n        alert(\"You need to optin to Choice Coin\");\n        dispatch({\n          type: \"close_vote_modal\"\n        });\n        return;\n      }\n\n      if (!containsChoice) {\n        alert(\"You need to optin to Choice Coin\");\n        dispatch({\n          type: \"close_vote_modal\"\n        });\n        return;\n      }\n\n      if (voteData.amount > balance) {\n        alert(\"You do not have sufficient balance to make this transaction.\");\n        return;\n      }\n\n      const suggestedParams = await algodClient.getTransactionParams().do();\n      const amountToSend = voteData.amount * 100;\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: address,\n        to: voteData.address,\n        amount: amountToSend,\n        assetIndex: ASSET_ID,\n        suggestedParams\n      });\n      const signedTxn = await myAlgoWallet.signTransaction(txn.toByte());\n      await algodClient.sendRawTransaction(signedTxn.blob).do(); // close modal.\n\n      dispatch({\n        type: \"close_vote_modal\"\n      }); // alert success\n\n      alert(\"You have successfully placed your vote for this election\");\n      window.location.reload();\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const algoSignerConnect = async voteData => {\n    try {\n      if (typeof window.AlgoSigner === \"undefined\") {\n        window.open(\"https://chrome.google.com/webstore/detail/algosigner/kmmolakhbgdlpkjkcjkebenjheonagdm\", \"_blank\");\n      } else {\n        await window.AlgoSigner.connect({\n          ledger: \"TestNet\"\n        });\n        const accounts = await window.AlgoSigner.accounts({\n          ledger: \"TestNet\"\n        });\n        const address = !!isThereAddress ? isThereAddress : accounts[0].address;\n        const myAccountInfo = await algodClient.accountInformation(!!isThereAddress ? isThereAddress : accounts[0].address).do(); // get balance of the voter\n\n        const balance = myAccountInfo.assets ? myAccountInfo.assets.find(element => element[\"asset-id\"] === ASSET_ID).amount / 100 : 0; // check if the voter address has Choice\n\n        const containsChoice = myAccountInfo.assets ? myAccountInfo.assets.some(element => element[\"asset-id\"] === ASSET_ID) : false; // if the address has no ASAs\n\n        if (myAccountInfo.assets.length === 0) {\n          alert(\"You need to optin to Choice Coin\");\n          dispatch({\n            type: \"close_vote_modal\"\n          });\n          return;\n        }\n\n        if (!containsChoice) {\n          alert(\"You need to optin to Choice Coin\");\n          dispatch({\n            type: \"close_vote_modal\"\n          });\n          return;\n        }\n\n        if (voteData.amount > balance) {\n          alert(\"You do not have sufficient balance to make this transaction.\");\n          return;\n        }\n\n        const suggestedParams = await algodClient.getTransactionParams().do();\n        const amountToSend = voteData.amount * 100;\n        const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: voteData.address,\n          amount: amountToSend,\n          assetIndex: ASSET_ID,\n          suggestedParams\n        });\n        const signedTxn = await window.AlgoSigner.signTxn([{\n          txn: window.AlgoSigner.encoding.msgpackToBase64(txn.toByte())\n        }]);\n        await algodClient.sendRawTransaction(window.AlgoSigner.encoding.base64ToMsgpack(signedTxn[0].blob)).do(); // close modal.\n\n        dispatch({\n          type: \"close_vote_modal\"\n        }); // alert success\n\n        alert(\"You have successfully placed your vote for this election\");\n        window.location.reload();\n      }\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const algoMobileConnect = async voteData => {\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal\n    });\n\n    try {\n      const address = !!isThereAddress ? isThereAddress : \"\";\n      const myAccountInfo = await algodClient.accountInformation(address).do();\n      const balance = myAccountInfo.assets ? myAccountInfo.assets.find(element => element[\"asset-id\"] === ASSET_ID).amount / 100 : 0;\n      const containsChoice = myAccountInfo.assets ? myAccountInfo.assets.some(element => element[\"asset-id\"] === ASSET_ID) : false;\n\n      if (myAccountInfo.assets.length === 0) {\n        alert(\"You need to optin to Choice Coin\");\n        return;\n      }\n\n      if (!containsChoice) {\n        alert(\"You need to optin to Choice Coin\");\n        return;\n      }\n\n      if (voteData.amount > balance) {\n        alert(\"You do not have sufficient balance to make this transaction.\");\n        return;\n      }\n\n      const suggestedParams = await algodClient.getTransactionParams().do();\n      const amountToSend = voteData.amount * 100;\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: address,\n        to: voteData.address,\n        amount: amountToSend,\n        assetIndex: ASSET_ID,\n        suggestedParams\n      });\n      const txnsToSign = [{\n        txn: Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\"),\n        message: \"Transaction using Mobile Wallet\"\n      }];\n      const requestParams = [txnsToSign];\n      const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\n      const result = await connector.sendCustomRequest(request);\n      const decodedResult = result.map(element => {\n        return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\n      });\n      console.log(decodedResult);\n      await algodClient.sendRawTransaction(decodedResult).do();\n      alert(\"You have successfully placed your vote for this election\");\n      window.location.reload();\n    } catch (error) {\n      alert(\"An error occured the during transaction process\");\n      console.log(error);\n    }\n  };\n\n  const placeVote = (address, amount, election) => {\n    if (!address) {\n      alert(\"Select an option to vote!!\");\n      return;\n    }\n\n    if (walletType === \"my-algo\") {\n      myAlgoConnect({\n        address,\n        amount,\n        election\n      });\n    } else if (walletType === \"algosigner\") {\n      algoSignerConnect({\n        address,\n        amount,\n        election\n      });\n    } else if (walletType === \"walletconnect\") {\n      algoMobileConnect({\n        address,\n        amount,\n        election\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ptt_elt\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ptt_elt_inn\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ptt_hd\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Participate in Voting process\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"card_list\",\n        children: data === null || data === void 0 ? void 0 : data.map((slug, index) => {\n          var _slug$candidates;\n\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card_cont\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card_r1\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  alignItems: \"center\"\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card_elt_img\",\n                  children: slug.process_image ? /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: slug.process_image,\n                    alt: \"\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 336,\n                    columnNumber: 25\n                  }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n                    className: \"uil uil-asterisk\",\n                    style: {\n                      paddingLeft: \"2px\",\n                      paddingBottom: \"2px\"\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 338,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card_elt_tit\",\n                  children: slug.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card_elt_desc\",\n              children: slug === null || slug === void 0 ? void 0 : slug.card_desc\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card_cand\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card_cand_hd\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"amountToCommit\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Amount to commit:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 355,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    min: \"1\",\n                    placeholder: \"1\",\n                    className: \"amtToCommitInp\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 356,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"vote_collap\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card_cand_hd\",\n                  children: \"Options\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"vote_now_list\",\n                  children: slug === null || slug === void 0 ? void 0 : (_slug$candidates = slug.candidates) === null || _slug$candidates === void 0 ? void 0 : _slug$candidates.map((item, index) => {\n                    return /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                        type: \"radio\",\n                        name: \"options\",\n                        value: item.address\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 371,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"vote_img_cont\",\n                        children: !!item.image ? /*#__PURE__*/_jsxDEV(\"img\", {\n                          src: item.image,\n                          alt: \"\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 379,\n                          columnNumber: 33\n                        }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n                          className: \"uil uil-asterisk\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 381,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 377,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        children: item.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 384,\n                        columnNumber: 29\n                      }, this)]\n                    }, index, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 370,\n                      columnNumber: 27\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"rec_vote_cont\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"record_vote\",\n                    onClick: e => {\n                      var voteVal = $(e.target).closest(\".card_cand\").find(\".vote_now_list\");\n                      var amountToSend = $(e.target).closest(\".card_cand\").find(\".amtToCommitInp\").val();\n                      var amt = !!amountToSend ? amountToSend : slug.choice_per_vote;\n                      placeVote($(\"input[name=options]:checked\", voteVal).val(), amt, slug);\n                    },\n                    children: \"Submit vote\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 391,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ElectionList, \"6v74sEjkacOF+LKW4LvUwrbPGik=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ElectionList;\nexport default ElectionList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ElectionList\");","map":{"version":3,"sources":["C:/Users/Williams/Desktop/App/choice-voting-app/src/ElectionList.js"],"names":["_","$","useDispatch","useSelector","algosdk","ASSET_ID","MyAlgoConnect","formatJsonRpcRequest","WalletConnect","QRCodeModal","ElectionList","dispatch","addressNum","state","status","algodClient","Algodv2","walletAddress","localStorage","getItem","walletType","addresses","split","isThereAddress","data","candidates","address","image","name","choice_per_vote","created_at","description","is_finished","is_started","process_image","slug","title","wallet","myAlgoConnect","voteData","myAlgoWallet","accounts","connect","shouldSelectOneAccount","myAccountInfo","accountInformation","do","balance","assets","find","element","amount","containsChoice","some","length","alert","type","suggestedParams","getTransactionParams","amountToSend","txn","makeAssetTransferTxnWithSuggestedParamsFromObject","from","to","assetIndex","signedTxn","signTransaction","toByte","sendRawTransaction","blob","window","location","reload","error","console","log","algoSignerConnect","AlgoSigner","open","ledger","signTxn","encoding","msgpackToBase64","base64ToMsgpack","algoMobileConnect","connector","bridge","qrcodeModal","txnsToSign","Buffer","encodeUnsignedTransaction","toString","message","requestParams","request","result","sendCustomRequest","decodedResult","map","Uint8Array","placeVote","election","index","display","flexDirection","alignItems","paddingLeft","paddingBottom","card_desc","item","e","voteVal","target","closest","val","amt"],"mappings":"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","sourcesContent":["import _ from \"lodash\";\r\nimport $ from \"jquery\";\r\nimport \"./styles/electionlist.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport algosdk from \"algosdk\";\r\nimport { ASSET_ID } from \"./constants\";\r\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\r\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\r\nimport WalletConnect from \"@walletconnect/client\";\r\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\r\n\r\nconst ElectionList = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const addressNum = useSelector((state) => state.status.addressNum);\r\n\r\n  const algodClient = new algosdk.Algodv2(\r\n    {\r\n      \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \",\r\n    },\r\n    \"https://testnet-algorand.api.purestake.io/ps2\",\r\n    \"\"\r\n  );\r\n  const walletAddress = localStorage.getItem(\"address\");\r\n  const walletType = localStorage.getItem(\"wallet-type\");\r\n\r\n  const addresses = localStorage.getItem(\"addresses\")?.split(\",\");\r\n\r\n  const isThereAddress = localStorage.getItem(\"address\");\r\n\r\n  const data = [\r\n    {\r\n      candidates: [\r\n        {\r\n          address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\r\n          image: \"\",\r\n          name: \"Yes\",\r\n        },\r\n\r\n        {\r\n          address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\r\n          image: \"\",\r\n          name: \"No\",\r\n        },\r\n      ],\r\n      choice_per_vote: 1,\r\n      created_at: \"2021-12-08T10:32:15.878473\",\r\n      description: \"Lorem ipsum\",\r\n      is_finished: false,\r\n      is_started: true,\r\n      process_image: \"https://i.postimg.cc/90XSyrjH/choice.png\",\r\n      slug: \"is-choice-coin-the-best-b0c7db\",\r\n      title: \"Is Choice Coin the best?\",\r\n      wallet: {\r\n        address: \"NX4T2FTIGNPVPSMEXJFMMKD46O4HRCPN25BDHOUW2SWXANZPQBZEDYKDVE\",\r\n      },\r\n    },\r\n  ];\r\n\r\n  const myAlgoConnect = async (voteData) => {\r\n    const myAlgoWallet = new MyAlgoConnect();\r\n\r\n    try {\r\n      const accounts = await myAlgoWallet.connect({\r\n        shouldSelectOneAccount: true,\r\n      });\r\n      const address = !!isThereAddress ? isThereAddress : accounts[0].address;\r\n\r\n      const myAccountInfo = await algodClient\r\n        .accountInformation(\r\n          !!isThereAddress ? isThereAddress : accounts[0].address\r\n        )\r\n        .do();\r\n\r\n      // get balance of the voter\r\n      const balance = myAccountInfo.assets\r\n        ? myAccountInfo.assets.find(\r\n            (element) => element[\"asset-id\"] === ASSET_ID\r\n          ).amount / 100\r\n        : 0;\r\n\r\n      // check if the voter address has Choice\r\n      const containsChoice = myAccountInfo.assets\r\n        ? myAccountInfo.assets.some(\r\n            (element) => element[\"asset-id\"] === ASSET_ID\r\n          )\r\n        : false;\r\n\r\n      // if the address has no ASAs\r\n      if (myAccountInfo.assets.length === 0) {\r\n        alert(\"You need to optin to Choice Coin\");\r\n        dispatch({ type: \"close_vote_modal\" });\r\n        return;\r\n      }\r\n\r\n      if (!containsChoice) {\r\n        alert(\"You need to optin to Choice Coin\");\r\n        dispatch({ type: \"close_vote_modal\" });\r\n        return;\r\n      }\r\n\r\n      if (voteData.amount > balance) {\r\n        alert(\"You do not have sufficient balance to make this transaction.\");\r\n        return;\r\n      }\r\n\r\n      const suggestedParams = await algodClient.getTransactionParams().do();\r\n      const amountToSend = voteData.amount * 100;\r\n\r\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n        from: address,\r\n        to: voteData.address,\r\n        amount: amountToSend,\r\n        assetIndex: ASSET_ID,\r\n        suggestedParams,\r\n      });\r\n\r\n      const signedTxn = await myAlgoWallet.signTransaction(txn.toByte());\r\n      await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n      // close modal.\r\n      dispatch({ type: \"close_vote_modal\" });\r\n\r\n      // alert success\r\n      alert(\"You have successfully placed your vote for this election\");\r\n      window.location.reload();\r\n    } catch (error) {\r\n      alert(\"An error occured the during transaction process\");\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const algoSignerConnect = async (voteData) => {\r\n    try {\r\n      if (typeof window.AlgoSigner === \"undefined\") {\r\n        window.open(\r\n          \"https://chrome.google.com/webstore/detail/algosigner/kmmolakhbgdlpkjkcjkebenjheonagdm\",\r\n          \"_blank\"\r\n        );\r\n      } else {\r\n        await window.AlgoSigner.connect({\r\n          ledger: \"TestNet\",\r\n        });\r\n        const accounts = await window.AlgoSigner.accounts({\r\n          ledger: \"TestNet\",\r\n        });\r\n\r\n        const address = !!isThereAddress ? isThereAddress : accounts[0].address;\r\n\r\n        const myAccountInfo = await algodClient\r\n          .accountInformation(\r\n            !!isThereAddress ? isThereAddress : accounts[0].address\r\n          )\r\n          .do();\r\n\r\n        // get balance of the voter\r\n        const balance = myAccountInfo.assets\r\n          ? myAccountInfo.assets.find(\r\n              (element) => element[\"asset-id\"] === ASSET_ID\r\n            ).amount / 100\r\n          : 0;\r\n\r\n        // check if the voter address has Choice\r\n        const containsChoice = myAccountInfo.assets\r\n          ? myAccountInfo.assets.some(\r\n              (element) => element[\"asset-id\"] === ASSET_ID\r\n            )\r\n          : false;\r\n\r\n        // if the address has no ASAs\r\n        if (myAccountInfo.assets.length === 0) {\r\n          alert(\"You need to optin to Choice Coin\");\r\n          dispatch({ type: \"close_vote_modal\" });\r\n          return;\r\n        }\r\n\r\n        if (!containsChoice) {\r\n          alert(\"You need to optin to Choice Coin\");\r\n          dispatch({ type: \"close_vote_modal\" });\r\n          return;\r\n        }\r\n\r\n        if (voteData.amount > balance) {\r\n          alert(\"You do not have sufficient balance to make this transaction.\");\r\n          return;\r\n        }\r\n\r\n        const suggestedParams = await algodClient.getTransactionParams().do();\r\n        const amountToSend = voteData.amount * 100;\r\n\r\n        const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n          from: address,\r\n          to: voteData.address,\r\n          amount: amountToSend,\r\n          assetIndex: ASSET_ID,\r\n          suggestedParams,\r\n        });\r\n\r\n        const signedTxn = await window.AlgoSigner.signTxn([\r\n          { txn: window.AlgoSigner.encoding.msgpackToBase64(txn.toByte()) },\r\n        ]);\r\n        await algodClient\r\n          .sendRawTransaction(\r\n            window.AlgoSigner.encoding.base64ToMsgpack(signedTxn[0].blob)\r\n          )\r\n          .do();\r\n\r\n        // close modal.\r\n        dispatch({ type: \"close_vote_modal\" });\r\n\r\n        // alert success\r\n        alert(\"You have successfully placed your vote for this election\");\r\n        window.location.reload();\r\n      }\r\n    } catch (error) {\r\n      alert(\"An error occured the during transaction process\");\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const algoMobileConnect = async (voteData) => {\r\n    const connector = new WalletConnect({\r\n      bridge: \"https://bridge.walletconnect.org\",\r\n      qrcodeModal: QRCodeModal,\r\n    });\r\n\r\n    try {\r\n      const address = !!isThereAddress ? isThereAddress : \"\";\r\n\r\n      const myAccountInfo = await algodClient.accountInformation(address).do();\r\n\r\n      const balance = myAccountInfo.assets\r\n        ? myAccountInfo.assets.find(\r\n            (element) => element[\"asset-id\"] === ASSET_ID\r\n          ).amount / 100\r\n        : 0;\r\n\r\n      const containsChoice = myAccountInfo.assets\r\n        ? myAccountInfo.assets.some(\r\n            (element) => element[\"asset-id\"] === ASSET_ID\r\n          )\r\n        : false;\r\n\r\n      if (myAccountInfo.assets.length === 0) {\r\n        alert(\"You need to optin to Choice Coin\");\r\n        return;\r\n      }\r\n\r\n      if (!containsChoice) {\r\n        alert(\"You need to optin to Choice Coin\");\r\n        return;\r\n      }\r\n\r\n      if (voteData.amount > balance) {\r\n        alert(\"You do not have sufficient balance to make this transaction.\");\r\n        return;\r\n      }\r\n\r\n      const suggestedParams = await algodClient.getTransactionParams().do();\r\n      const amountToSend = voteData.amount * 100;\r\n\r\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n        from: address,\r\n        to: voteData.address,\r\n        amount: amountToSend,\r\n        assetIndex: ASSET_ID,\r\n        suggestedParams,\r\n      });\r\n\r\n      const txnsToSign = [\r\n        {\r\n          txn: Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\r\n            \"base64\"\r\n          ),\r\n          message: \"Transaction using Mobile Wallet\",\r\n        },\r\n      ];\r\n\r\n      const requestParams = [txnsToSign];\r\n\r\n      const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\r\n      const result = await connector.sendCustomRequest(request);\r\n\r\n      const decodedResult = result.map((element) => {\r\n        return element ? new Uint8Array(Buffer.from(element, \"base64\")) : null;\r\n      });\r\n\r\n      console.log(decodedResult);\r\n\r\n      await algodClient.sendRawTransaction(decodedResult).do();\r\n\r\n      alert(\"You have successfully placed your vote for this election\");\r\n      window.location.reload();\r\n    } catch (error) {\r\n      alert(\"An error occured the during transaction process\");\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const placeVote = (address, amount, election) => {\r\n    if (!address) {\r\n      alert(\"Select an option to vote!!\");\r\n      return;\r\n    }\r\n\r\n    if (walletType === \"my-algo\") {\r\n      myAlgoConnect({ address, amount, election });\r\n    } else if (walletType === \"algosigner\") {\r\n      algoSignerConnect({ address, amount, election });\r\n    } else if (walletType === \"walletconnect\") {\r\n      algoMobileConnect({ address, amount, election });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"ptt_elt\">\r\n      <div className=\"ptt_elt_inn\">\r\n        <div className=\"ptt_hd\">\r\n          <p>Participate in Voting process</p>\r\n        </div>\r\n        <ul className=\"card_list\">\r\n          {data?.map((slug, index) => {\r\n            return (\r\n              <div className=\"card_cont\" key={index}>\r\n                <div className=\"card_r1\">\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                  >\r\n                    <div className=\"card_elt_img\">\r\n                      {slug.process_image ? (\r\n                        <img src={slug.process_image} alt=\"\" />\r\n                      ) : (\r\n                        <i\r\n                          className=\"uil uil-asterisk\"\r\n                          style={{ paddingLeft: \"2px\", paddingBottom: \"2px\" }}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                    <div className=\"card_elt_tit\">{slug.title}</div>\r\n                  </div>\r\n\r\n                  {/* <div className=\"electionEndTime\">Ends on:</div> */}\r\n                </div>\r\n\r\n                <div className=\"card_elt_desc\">{slug?.card_desc}</div>\r\n\r\n                <div className=\"card_cand\">\r\n                  <div className=\"card_cand_hd\">\r\n                    <div className=\"amountToCommit\">\r\n                      <p>Amount to commit:</p>\r\n                      <input\r\n                        type=\"number\"\r\n                        min=\"1\"\r\n                        placeholder=\"1\"\r\n                        className=\"amtToCommitInp\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"vote_collap\">\r\n                    <div className=\"card_cand_hd\">Options</div>\r\n                    <ul className=\"vote_now_list\">\r\n                      {slug?.candidates?.map((item, index) => {\r\n                        return (\r\n                          <li key={index}>\r\n                            <input\r\n                              type=\"radio\"\r\n                              name=\"options\"\r\n                              value={item.address}\r\n                            />\r\n\r\n                            <div className=\"vote_img_cont\">\r\n                              {!!item.image ? (\r\n                                <img src={item.image} alt=\"\" />\r\n                              ) : (\r\n                                <i className=\"uil uil-asterisk\"></i>\r\n                              )}\r\n                            </div>\r\n                            <p>{item.name}</p>\r\n                          </li>\r\n                        );\r\n                      })}\r\n                    </ul>\r\n\r\n                    <div className=\"rec_vote_cont\">\r\n                      <button\r\n                        className=\"record_vote\"\r\n                        onClick={(e) => {\r\n                          var voteVal = $(e.target)\r\n                            .closest(\".card_cand\")\r\n                            .find(\".vote_now_list\");\r\n\r\n                          var amountToSend = $(e.target)\r\n                            .closest(\".card_cand\")\r\n                            .find(\".amtToCommitInp\")\r\n                            .val();\r\n\r\n                          var amt = !!amountToSend\r\n                            ? amountToSend\r\n                            : slug.choice_per_vote;\r\n\r\n                          placeVote(\r\n                            $(\"input[name=options]:checked\", voteVal).val(),\r\n                            amt,\r\n                            slug\r\n                          );\r\n                        }}\r\n                      >\r\n                        Submit vote\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ElectionList;\r\n"]},"metadata":{},"sourceType":"module"}