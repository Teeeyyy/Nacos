{"ast":null,"code":"import algosdk from \"algosdk\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst port = \"\";\nconst CHOICE_ID = 21364625;\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\nconst token = {\n  \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\"\n};\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\n\nconst getCommittedAmount = async ({\n  userAddress\n}) => {\n  const options = [{\n    address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n    image: \"\",\n    name: \"Yes\"\n  }, {\n    address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n    image: \"\",\n    name: \"No\"\n  }];\n  const firstAddress = options[0].address;\n  const secondAddress = options[1].address;\n  let txnAmt = 0;\n\n  try {\n    let pastTxn = await indexerClient.searchForTransactions().address(userAddress).assetID(CHOICE_ID).limit().do();\n    const txns = pastTxn[\"transactions\"];\n    txns.forEach(item => {\n      const txn = item[\"asset-transfer-transaction\"];\n\n      if (txn[\"receiver\"] == firstAddress || txn[\"receiver\"] == secondAddress) {\n        txnAmt = txnAmt + txn[\"amount\"] / 100;\n      }\n    });\n    console.log(txnAmt);\n  } catch (error) {\n    console.log(error);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: txnAmt\n  }, void 0, false);\n};\n\nexport { getCommittedAmount };","map":{"version":3,"sources":["C:/Users/Williams/Desktop/App/choice-voting-app/frontend/src/getCommittedAmount.js"],"names":["algosdk","port","CHOICE_ID","indexerAddress","token","indexerClient","Indexer","getCommittedAmount","userAddress","options","address","image","name","firstAddress","secondAddress","txnAmt","pastTxn","searchForTransactions","assetID","limit","do","txns","forEach","item","txn","console","log","error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;;;AAEA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,SAAS,GAAG,QAAlB;AACA,MAAMC,cAAc,GAAG,gDAAvB;AACA,MAAMC,KAAK,GAAG;AAAE,eAAa;AAAf,CAAd;AACA,MAAMC,aAAa,GAAG,IAAIL,OAAO,CAACM,OAAZ,CAAoBF,KAApB,EAA2BD,cAA3B,EAA2CF,IAA3C,CAAtB;;AAEA,MAAMM,kBAAkB,GAAG,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAA2B;AACpD,QAAMC,OAAO,GAAG,CACd;AACEC,IAAAA,OAAO,EAAE,4DADX;AAEEC,IAAAA,KAAK,EAAE,EAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADc,EAOd;AACEF,IAAAA,OAAO,EAAE,4DADX;AAEEC,IAAAA,KAAK,EAAE,EAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAPc,CAAhB;AAcA,QAAMC,YAAY,GAAGJ,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAhC;AACA,QAAMI,aAAa,GAAGL,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAjC;AACA,MAAIK,MAAM,GAAG,CAAb;;AAEA,MAAI;AACF,QAAIC,OAAO,GAAG,MAAMX,aAAa,CAC9BY,qBADiB,GAEjBP,OAFiB,CAETF,WAFS,EAGjBU,OAHiB,CAGThB,SAHS,EAIjBiB,KAJiB,GAKjBC,EALiB,EAApB;AAMA,UAAMC,IAAI,GAAGL,OAAO,CAAC,cAAD,CAApB;AAEAK,IAAAA,IAAI,CAACC,OAAL,CAAcC,IAAD,IAAU;AACrB,YAAMC,GAAG,GAAGD,IAAI,CAAC,4BAAD,CAAhB;;AACA,UAAIC,GAAG,CAAC,UAAD,CAAH,IAAmBX,YAAnB,IAAmCW,GAAG,CAAC,UAAD,CAAH,IAAmBV,aAA1D,EAAyE;AACvEC,QAAAA,MAAM,GAAGA,MAAM,GAAGS,GAAG,CAAC,QAAD,CAAH,GAAgB,GAAlC;AACD;AACF,KALD;AAMAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,MAAZ;AACD,GAhBD,CAgBE,OAAOY,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;;AAED,sBAAO;AAAA,cAAGZ;AAAH,mBAAP;AACD,CAxCD;;AA0CA,SAASR,kBAAT","sourcesContent":["import algosdk from \"algosdk\";\r\n\r\nconst port = \"\";\r\nconst CHOICE_ID = 21364625;\r\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\r\nconst token = { \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\" };\r\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\r\n\r\nconst getCommittedAmount = async ({ userAddress }) => {\r\n  const options = [\r\n    {\r\n      address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\r\n      image: \"\",\r\n      name: \"Yes\",\r\n    },\r\n\r\n    {\r\n      address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\r\n      image: \"\",\r\n      name: \"No\",\r\n    },\r\n  ];\r\n\r\n  const firstAddress = options[0].address;\r\n  const secondAddress = options[1].address;\r\n  let txnAmt = 0;\r\n\r\n  try {\r\n    let pastTxn = await indexerClient\r\n      .searchForTransactions()\r\n      .address(userAddress)\r\n      .assetID(CHOICE_ID)\r\n      .limit()\r\n      .do();\r\n    const txns = pastTxn[\"transactions\"];\r\n\r\n    txns.forEach((item) => {\r\n      const txn = item[\"asset-transfer-transaction\"];\r\n      if (txn[\"receiver\"] == firstAddress || txn[\"receiver\"] == secondAddress) {\r\n        txnAmt = txnAmt + txn[\"amount\"] / 100;\r\n      }\r\n    });\r\n    console.log(txnAmt);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  return <>{txnAmt}</>;\r\n};\r\n\r\nexport { getCommittedAmount };\r\n"]},"metadata":{},"sourceType":"module"}