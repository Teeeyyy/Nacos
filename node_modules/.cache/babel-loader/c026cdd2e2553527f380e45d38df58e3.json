{"ast":null,"code":"import algosdk from \"algosdk\";\nconst port = \"\";\nconst CHOICE_ID = 21364625;\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\nconst token = {\n  \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\"\n};\nconst algodClient = new algosdk.Algodv2(token, baseServer, port);\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\n\nconst getCommittedAmount = async () => {\n  const options = [{\n    address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n    image: \"\",\n    name: \"Yes\"\n  }, {\n    address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n    image: \"\",\n    name: \"No\"\n  }];\n  const firstAddress = options[0].address;\n  const secondAddress = options[1].address;\n\n  try {\n    const txnArray = [];\n    const userAddress = \"S76LPUPTSGL56BUGRKEQSWEDQ6VSMP62FPE3XJDREJ2XIDWQC36DL2KDJQ\";\n    let pastTxn = await indexerClient.searchForTransactions().address(userAddress).assetID(CHOICE_ID).limit(20).do();\n    const txns = pastTxn[\"transactions\"];\n    let txnAmt = 0;\n    txns.forEach(element => {\n      let obj = {};\n      const txn = element[\"asset-transfer-transaction\"];\n\n      if (txn[\"receiver\"] == firstAddress) {\n        txnAmt = txnAmt + txn[\"amount\"] / 100;\n      } else if (txn[\"receiver\"] == secondAddress) {\n        txnAmt = txnAmt + txn[\"amount\"] / 100;\n      }\n    });\n    console.log(txnArray, txnAmt);\n  } catch (error) {\n    console.log(error);\n  }\n\n  return \"good\";\n};\n\nexport { getCommittedAmount };","map":{"version":3,"sources":["C:/Users/Williams/Desktop/App/choice-voting-app/frontend/src/getCommittedAmount.js"],"names":["algosdk","port","CHOICE_ID","baseServer","indexerAddress","token","algodClient","Algodv2","indexerClient","Indexer","getCommittedAmount","options","address","image","name","firstAddress","secondAddress","txnArray","userAddress","pastTxn","searchForTransactions","assetID","limit","do","txns","txnAmt","forEach","element","obj","txn","console","log","error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,SAAS,GAAG,QAAlB;AACA,MAAMC,UAAU,GAAG,+CAAnB;AACA,MAAMC,cAAc,GAAG,gDAAvB;AACA,MAAMC,KAAK,GAAG;AAAE,eAAa;AAAf,CAAd;AACA,MAAMC,WAAW,GAAG,IAAIN,OAAO,CAACO,OAAZ,CAAoBF,KAApB,EAA2BF,UAA3B,EAAuCF,IAAvC,CAApB;AAEA,MAAMO,aAAa,GAAG,IAAIR,OAAO,CAACS,OAAZ,CAAoBJ,KAApB,EAA2BD,cAA3B,EAA2CH,IAA3C,CAAtB;;AAEA,MAAMS,kBAAkB,GAAG,YAAY;AACrC,QAAMC,OAAO,GAAG,CACd;AACEC,IAAAA,OAAO,EAAE,4DADX;AAEEC,IAAAA,KAAK,EAAE,EAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADc,EAOd;AACEF,IAAAA,OAAO,EAAE,4DADX;AAEEC,IAAAA,KAAK,EAAE,EAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAPc,CAAhB;AAcA,QAAMC,YAAY,GAAGJ,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAhC;AACA,QAAMI,aAAa,GAAGL,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAjC;;AAEA,MAAI;AACF,UAAMK,QAAQ,GAAG,EAAjB;AACA,UAAMC,WAAW,GACf,4DADF;AAGA,QAAIC,OAAO,GAAG,MAAMX,aAAa,CAC9BY,qBADiB,GAEjBR,OAFiB,CAETM,WAFS,EAGjBG,OAHiB,CAGTnB,SAHS,EAIjBoB,KAJiB,CAIX,EAJW,EAKjBC,EALiB,EAApB;AAOA,UAAMC,IAAI,GAAGL,OAAO,CAAC,cAAD,CAApB;AAEA,QAAIM,MAAM,GAAG,CAAb;AAEAD,IAAAA,IAAI,CAACE,OAAL,CAAcC,OAAD,IAAa;AACxB,UAAIC,GAAG,GAAG,EAAV;AACA,YAAMC,GAAG,GAAGF,OAAO,CAAC,4BAAD,CAAnB;;AAEA,UAAIE,GAAG,CAAC,UAAD,CAAH,IAAmBd,YAAvB,EAAqC;AACnCU,QAAAA,MAAM,GAAGA,MAAM,GAAGI,GAAG,CAAC,QAAD,CAAH,GAAgB,GAAlC;AACD,OAFD,MAEO,IAAIA,GAAG,CAAC,UAAD,CAAH,IAAmBb,aAAvB,EAAsC;AAC3CS,QAAAA,MAAM,GAAGA,MAAM,GAAGI,GAAG,CAAC,QAAD,CAAH,GAAgB,GAAlC;AACD;AACF,KATD;AAUAC,IAAAA,OAAO,CAACC,GAAR,CAAYd,QAAZ,EAAsBQ,MAAtB;AACD,GA3BD,CA2BE,OAAOO,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;;AAED,SAAO,MAAP;AACD,CAlDD;;AAoDA,SAAStB,kBAAT","sourcesContent":["import algosdk from \"algosdk\";\r\n\r\nconst port = \"\";\r\nconst CHOICE_ID = 21364625;\r\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\r\nconst token = { \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\" };\r\nconst algodClient = new algosdk.Algodv2(token, baseServer, port);\r\n\r\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\r\n\r\nconst getCommittedAmount = async () => {\r\n  const options = [\r\n    {\r\n      address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\r\n      image: \"\",\r\n      name: \"Yes\",\r\n    },\r\n\r\n    {\r\n      address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\r\n      image: \"\",\r\n      name: \"No\",\r\n    },\r\n  ];\r\n\r\n  const firstAddress = options[0].address;\r\n  const secondAddress = options[1].address;\r\n\r\n  try {\r\n    const txnArray = [];\r\n    const userAddress =\r\n      \"S76LPUPTSGL56BUGRKEQSWEDQ6VSMP62FPE3XJDREJ2XIDWQC36DL2KDJQ\";\r\n\r\n    let pastTxn = await indexerClient\r\n      .searchForTransactions()\r\n      .address(userAddress)\r\n      .assetID(CHOICE_ID)\r\n      .limit(20)\r\n      .do();\r\n\r\n    const txns = pastTxn[\"transactions\"];\r\n\r\n    let txnAmt = 0;\r\n\r\n    txns.forEach((element) => {\r\n      let obj = {};\r\n      const txn = element[\"asset-transfer-transaction\"];\r\n\r\n      if (txn[\"receiver\"] == firstAddress) {\r\n        txnAmt = txnAmt + txn[\"amount\"] / 100;\r\n      } else if (txn[\"receiver\"] == secondAddress) {\r\n        txnAmt = txnAmt + txn[\"amount\"] / 100;\r\n      }\r\n    });\r\n    console.log(txnArray, txnAmt);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  return \"good\";\r\n};\r\n\r\nexport { getCommittedAmount };\r\n"]},"metadata":{},"sourceType":"module"}