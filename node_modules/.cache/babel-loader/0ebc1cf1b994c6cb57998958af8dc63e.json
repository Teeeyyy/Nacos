{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Williams\\\\Desktop\\\\App\\\\choice-voting-app\\\\src\\\\statics\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport { WalletSelector } from \"@xbacked-dao/algorand-wallet-select\";\nimport WalletConnect from \"@walletconnect/client\";\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\nimport algosdk from \"algosdk\";\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Test = () => {\n  _s();\n\n  //\n  useEffect(() => {\n    const connector = new WalletConnect({\n      bridge: \"https://bridge.walletconnect.org\",\n      qrcodeModal: QRCodeModal\n    });\n\n    if (!connector.connected) {\n      connector.createSession();\n      console.log(\"good\");\n    }\n\n    connector.on(\"connect\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      const {\n        accounts\n      } = payload.params[0];\n      console.log(accounts);\n    });\n    connector.on(\"session_update\", (error, payload) => {\n      if (error) {\n        throw error;\n      }\n\n      const {\n        accounts\n      } = payload.params[0];\n      console.log(accounts);\n    });\n    connector.on(\"disconnect\", (error, payload) => {\n      if (error) {\n        console.log(error);\n      }\n    });\n    return connector.killSession();\n  }, []);\n\n  const returnWallet = async data => {\n    if (!!data) {\n      var _data$connector;\n\n      console.log(data === null || data === void 0 ? void 0 : (_data$connector = data.connector) === null || _data$connector === void 0 ? void 0 : _data$connector.check());\n      console.log(await data.connector.connect());\n      console.log(data.connector.provider);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(WalletSelector, {\n    returnWallet: returnWallet,\n    wallets: \"walletconnect\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 10\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Test, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/Users/Williams/Desktop/App/choice-voting-app/src/statics/Test.js"],"names":["WalletSelector","WalletConnect","QRCodeModal","algosdk","formatJsonRpcRequest","useEffect","Test","connector","bridge","qrcodeModal","connected","createSession","console","log","on","error","payload","accounts","params","killSession","returnWallet","data","check","connect","provider"],"mappings":";;;AAAA,SAASA,cAAT,QAA+B,qCAA/B;AAEA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,SAAT,QAA0B,OAA1B;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAME,SAAS,GAAG,IAAIN,aAAJ,CAAkB;AAClCO,MAAAA,MAAM,EAAE,kCAD0B;AAElCC,MAAAA,WAAW,EAAEP;AAFqB,KAAlB,CAAlB;;AAKA,QAAI,CAACK,SAAS,CAACG,SAAf,EAA0B;AACxBH,MAAAA,SAAS,CAACI,aAAV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;;AAEDN,IAAAA,SAAS,CAACO,EAAV,CAAa,SAAb,EAAwB,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC1C,UAAID,KAAJ,EAAW;AACT,cAAMA,KAAN;AACD;;AAED,YAAM;AAAEE,QAAAA;AAAF,UAAeD,OAAO,CAACE,MAAR,CAAe,CAAf,CAArB;AAEAN,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AACD,KARD;AAUAV,IAAAA,SAAS,CAACO,EAAV,CAAa,gBAAb,EAA+B,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACjD,UAAID,KAAJ,EAAW;AACT,cAAMA,KAAN;AACD;;AAED,YAAM;AAAEE,QAAAA;AAAF,UAAeD,OAAO,CAACE,MAAR,CAAe,CAAf,CAArB;AAEAN,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AACD,KARD;AAUAV,IAAAA,SAAS,CAACO,EAAV,CAAa,YAAb,EAA2B,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC7C,UAAID,KAAJ,EAAW;AACTH,QAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACD;AACF,KAJD;AAMA,WAAOR,SAAS,CAACY,WAAV,EAAP;AACD,GAtCQ,EAsCN,EAtCM,CAAT;;AAwCA,QAAMC,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACnC,QAAI,CAAC,CAACA,IAAN,EAAY;AAAA;;AACVT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAZ,aAAYA,IAAZ,0CAAYA,IAAI,CAAEd,SAAlB,oDAAY,gBAAiBe,KAAjB,EAAZ;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAMQ,IAAI,CAACd,SAAL,CAAegB,OAAf,EAAlB;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAYQ,IAAI,CAACd,SAAL,CAAeiB,QAA3B;AACD;AACF,GAND;;AAQA,sBAAO,QAAC,cAAD;AAAgB,IAAA,YAAY,EAAEJ,YAA9B;AAA4C,IAAA,OAAO,EAAC;AAApD;AAAA;AAAA;AAAA;AAAA,UAAP;AAEA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAtDD;;GAAMd,I;;KAAAA,I;AAwDN,eAAeA,IAAf","sourcesContent":["import { WalletSelector } from \"@xbacked-dao/algorand-wallet-select\";\r\n\r\nimport WalletConnect from \"@walletconnect/client\";\r\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\r\nimport algosdk from \"algosdk\";\r\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Test = () => {\r\n  //\r\n\r\n  useEffect(() => {\r\n    const connector = new WalletConnect({\r\n      bridge: \"https://bridge.walletconnect.org\",\r\n      qrcodeModal: QRCodeModal,\r\n    });\r\n\r\n    if (!connector.connected) {\r\n      connector.createSession();\r\n      console.log(\"good\");\r\n    }\r\n\r\n    connector.on(\"connect\", (error, payload) => {\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const { accounts } = payload.params[0];\r\n\r\n      console.log(accounts);\r\n    });\r\n\r\n    connector.on(\"session_update\", (error, payload) => {\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const { accounts } = payload.params[0];\r\n\r\n      console.log(accounts);\r\n    });\r\n\r\n    connector.on(\"disconnect\", (error, payload) => {\r\n      if (error) {\r\n        console.log(error);\r\n      }\r\n    });\r\n\r\n    return connector.killSession();\r\n  }, []);\r\n\r\n  const returnWallet = async (data) => {\r\n    if (!!data) {\r\n      console.log(data?.connector?.check());\r\n      console.log(await data.connector.connect());\r\n      console.log(data.connector.provider);\r\n    }\r\n  };\r\n\r\n  return <WalletSelector returnWallet={returnWallet} wallets=\"walletconnect\" />;\r\n\r\n  return <div></div>;\r\n};\r\n\r\nexport default Test;\r\n"]},"metadata":{},"sourceType":"module"}