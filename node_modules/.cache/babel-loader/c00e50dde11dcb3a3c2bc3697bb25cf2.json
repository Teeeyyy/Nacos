{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport algosdk from \"algosdk\";\nimport { useEffect, useState } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst port = \"\";\nconst CHOICE_ID = 21364625;\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\nconst token = {\n  \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\"\n};\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\n\nconst GetCommittedAmount = () => {\n  _s();\n\n  const addressNum = useSelector(state => state.status.addressNum);\n  const userAddress = localStorage.getItem(\"addresses\").split(\",\")[addressNum]; // const userAddress = localStorage.getItem(\"address\");\n\n  const options = [{\n    address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\n    image: \"\",\n    name: \"Yes\"\n  }, {\n    address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\n    image: \"\",\n    name: \"No\"\n  }];\n  const firstAddress = options[0].address;\n  const secondAddress = options[1].address;\n  let txnAmt = 0;\n  const [Amt, setAmt] = useState(0);\n\n  const getIt = async () => {\n    try {\n      let pastTxn = await indexerClient.searchForTransactions().address(userAddress).assetID(CHOICE_ID).limit().do();\n      const txns = pastTxn[\"transactions\"];\n      txns.forEach(item => {\n        const txn = item[\"asset-transfer-transaction\"];\n\n        if (txn[\"receiver\"] === firstAddress || txn[\"receiver\"] === secondAddress) {\n          txnAmt = txnAmt + txn[\"amount\"] / 100;\n        }\n      });\n      setAmt(txnAmt);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getIt();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Amt\n  }, void 0, false);\n};\n\n_s(GetCommittedAmount, \"IJVqL1CRlXXx5kq+kc271Cs0Qpk=\", true);\n\n_c = GetCommittedAmount;\nexport default GetCommittedAmount;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetCommittedAmount\");","map":{"version":3,"sources":["C:/Users/Williams/Desktop/App/choice-voting-app/frontend/src/GetCommittedAmount.js"],"names":["algosdk","useEffect","useState","port","CHOICE_ID","indexerAddress","token","indexerClient","Indexer","GetCommittedAmount","addressNum","useSelector","state","status","userAddress","localStorage","getItem","split","options","address","image","name","firstAddress","secondAddress","txnAmt","Amt","setAmt","getIt","pastTxn","searchForTransactions","assetID","limit","do","txns","forEach","item","txn","error","console","log"],"mappings":";;AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAEA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,SAAS,GAAG,QAAlB;AACA,MAAMC,cAAc,GAAG,gDAAvB;AACA,MAAMC,KAAK,GAAG;AAAE,eAAa;AAAf,CAAd;AACA,MAAMC,aAAa,GAAG,IAAIP,OAAO,CAACQ,OAAZ,CAAoBF,KAApB,EAA2BD,cAA3B,EAA2CF,IAA3C,CAAtB;;AAEA,MAAMM,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAMC,UAAU,GAAGC,WAAW,CAAEC,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaH,UAAzB,CAA9B;AACA,QAAMI,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,KAAlC,CAAwC,GAAxC,EAA6CP,UAA7C,CAApB,CAF+B,CAI/B;;AAEA,QAAMQ,OAAO,GAAG,CACd;AACEC,IAAAA,OAAO,EAAE,4DADX;AAEEC,IAAAA,KAAK,EAAE,EAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADc,EAOd;AACEF,IAAAA,OAAO,EAAE,4DADX;AAEEC,IAAAA,KAAK,EAAE,EAFT;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAPc,CAAhB;AAcA,QAAMC,YAAY,GAAGJ,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAhC;AACA,QAAMI,aAAa,GAAGL,OAAO,CAAC,CAAD,CAAP,CAAWC,OAAjC;AACA,MAAIK,MAAM,GAAG,CAAb;AAEA,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBxB,QAAQ,CAAC,CAAD,CAA9B;;AAEA,QAAMyB,KAAK,GAAG,YAAY;AACxB,QAAI;AACF,UAAIC,OAAO,GAAG,MAAMrB,aAAa,CAC9BsB,qBADiB,GAEjBV,OAFiB,CAETL,WAFS,EAGjBgB,OAHiB,CAGT1B,SAHS,EAIjB2B,KAJiB,GAKjBC,EALiB,EAApB;AAMA,YAAMC,IAAI,GAAGL,OAAO,CAAC,cAAD,CAApB;AAEAK,MAAAA,IAAI,CAACC,OAAL,CAAcC,IAAD,IAAU;AACrB,cAAMC,GAAG,GAAGD,IAAI,CAAC,4BAAD,CAAhB;;AACA,YACEC,GAAG,CAAC,UAAD,CAAH,KAAoBd,YAApB,IACAc,GAAG,CAAC,UAAD,CAAH,KAAoBb,aAFtB,EAGE;AACAC,UAAAA,MAAM,GAAGA,MAAM,GAAGY,GAAG,CAAC,QAAD,CAAH,GAAgB,GAAlC;AACD;AACF,OARD;AAUAV,MAAAA,MAAM,CAACF,MAAD,CAAN;AACD,KApBD,CAoBE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAxBD;;AA0BApC,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,KAAK;AACN,GAFQ,EAEN,EAFM,CAAT;AAIA,sBAAO;AAAA,cAAGF;AAAH,mBAAP;AACD,CAzDD;;GAAMhB,kB;;KAAAA,kB;AA2DN,eAAeA,kBAAf","sourcesContent":["import algosdk from \"algosdk\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst port = \"\";\r\nconst CHOICE_ID = 21364625;\r\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\r\nconst token = { \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\" };\r\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\r\n\r\nconst GetCommittedAmount = () => {\r\n  const addressNum = useSelector((state) => state.status.addressNum);\r\n  const userAddress = localStorage.getItem(\"addresses\").split(\",\")[addressNum];\r\n\r\n  // const userAddress = localStorage.getItem(\"address\");\r\n\r\n  const options = [\r\n    {\r\n      address: \"DQ2NPLGQ3CV3QAPMS7KHIRUNUF2ZSTYRT5SZGDCPLB7VPC5OSSLCI5H7DM\",\r\n      image: \"\",\r\n      name: \"Yes\",\r\n    },\r\n\r\n    {\r\n      address: \"6P6D5KQH5VIXEJGW6LXPUMEZ77XNLHQXB6GMW4CBDBN2VJ4CFZ7HCIKUBM\",\r\n      image: \"\",\r\n      name: \"No\",\r\n    },\r\n  ];\r\n\r\n  const firstAddress = options[0].address;\r\n  const secondAddress = options[1].address;\r\n  let txnAmt = 0;\r\n\r\n  const [Amt, setAmt] = useState(0);\r\n\r\n  const getIt = async () => {\r\n    try {\r\n      let pastTxn = await indexerClient\r\n        .searchForTransactions()\r\n        .address(userAddress)\r\n        .assetID(CHOICE_ID)\r\n        .limit()\r\n        .do();\r\n      const txns = pastTxn[\"transactions\"];\r\n\r\n      txns.forEach((item) => {\r\n        const txn = item[\"asset-transfer-transaction\"];\r\n        if (\r\n          txn[\"receiver\"] === firstAddress ||\r\n          txn[\"receiver\"] === secondAddress\r\n        ) {\r\n          txnAmt = txnAmt + txn[\"amount\"] / 100;\r\n        }\r\n      });\r\n\r\n      setAmt(txnAmt);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getIt();\r\n  }, []);\r\n\r\n  return <>{Amt}</>;\r\n};\r\n\r\nexport default GetCommittedAmount;\r\n"]},"metadata":{},"sourceType":"module"}