{"ast":null,"code":"import algosdk from \"algosdk\";\nconst port = \"\";\nconst CHOICE_ID = 21364625;\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\nconst token = {\n  \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\"\n};\nconst algodClient = new algosdk.Algodv2(token, baseServer, port);\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\n\nconst getTotal = async () => {\n  try {\n    let txnArray = [];\n    let userAddress = \"S76LPUPTSGL56BUGRKEQSWEDQ6VSMP62FPE3XJDREJ2XIDWQC36DL2KDJQ\";\n    let pastTxn = await indexerClient.searchForTransactions().address(userAddress).assetID(CHOICE_ID).limit(20).do();\n    const txns = pastTxn[\"transactions\"];\n    txns.forEach(element => {\n      const transaction = element[\"asset-transfer-transaction\"];\n\n      if (transaction[\"receiver\"] == red_address) {\n        obj = {\n          candidate: \"Red\",\n          address: red_address,\n          Id: element[\"id\"],\n          amount: transaction[\"amount\"] / 100\n        };\n        txnArray.push(obj);\n      } else if (transaction[\"receiver\"] == blue_address) {\n        obj = {\n          candidate: \"Blue\",\n          address: blue_address,\n          Id: element[\"id\"],\n          amount: transaction[\"amount\"] / 100\n        };\n        txnArray.push(obj);\n      }\n    });\n    console.log(txnArray);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getCommittedAmount = async () => {\n  const pastTxn = await indexerClient.searchForTransactions().address(\"S76LPUPTSGL56BUGRKEQSWEDQ6VSMP62FPE3XJDREJ2XIDWQC36DL2KDJQ\").assetID(CHOICE_ID).limit(20).do();\n  const txn = pastTxn[\"transactions\"];\n  return txn;\n};\n\nexport { getCommittedAmount };","map":{"version":3,"sources":["C:/Users/Williams/Desktop/App/choice-voting-app/frontend/src/getCommittedAmount.js"],"names":["algosdk","port","CHOICE_ID","baseServer","indexerAddress","token","algodClient","Algodv2","indexerClient","Indexer","getTotal","txnArray","userAddress","pastTxn","searchForTransactions","address","assetID","limit","do","txns","forEach","element","transaction","red_address","obj","candidate","Id","amount","push","blue_address","console","log","error","getCommittedAmount","txn"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,SAAS,GAAG,QAAlB;AACA,MAAMC,UAAU,GAAG,+CAAnB;AACA,MAAMC,cAAc,GAAG,gDAAvB;AACA,MAAMC,KAAK,GAAG;AAAE,eAAa;AAAf,CAAd;AAEA,MAAMC,WAAW,GAAG,IAAIN,OAAO,CAACO,OAAZ,CAAoBF,KAApB,EAA2BF,UAA3B,EAAuCF,IAAvC,CAApB;AAEA,MAAMO,aAAa,GAAG,IAAIR,OAAO,CAACS,OAAZ,CAAoBJ,KAApB,EAA2BD,cAA3B,EAA2CH,IAA3C,CAAtB;;AAEA,MAAMS,QAAQ,GAAG,YAAY;AAC3B,MAAI;AACF,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,WAAW,GACb,4DADF;AAEA,QAAIC,OAAO,GAAG,MAAML,aAAa,CAC9BM,qBADiB,GAEjBC,OAFiB,CAETH,WAFS,EAGjBI,OAHiB,CAGTd,SAHS,EAIjBe,KAJiB,CAIX,EAJW,EAKjBC,EALiB,EAApB;AAOA,UAAMC,IAAI,GAAGN,OAAO,CAAC,cAAD,CAApB;AAEAM,IAAAA,IAAI,CAACC,OAAL,CAAcC,OAAD,IAAa;AACxB,YAAMC,WAAW,GAAGD,OAAO,CAAC,4BAAD,CAA3B;;AACA,UAAIC,WAAW,CAAC,UAAD,CAAX,IAA2BC,WAA/B,EAA4C;AAC1CC,QAAAA,GAAG,GAAG;AACJC,UAAAA,SAAS,EAAE,KADP;AAEJV,UAAAA,OAAO,EAAEQ,WAFL;AAGJG,UAAAA,EAAE,EAAEL,OAAO,CAAC,IAAD,CAHP;AAIJM,UAAAA,MAAM,EAAEL,WAAW,CAAC,QAAD,CAAX,GAAwB;AAJ5B,SAAN;AAMAX,QAAAA,QAAQ,CAACiB,IAAT,CAAcJ,GAAd;AACD,OARD,MAQO,IAAIF,WAAW,CAAC,UAAD,CAAX,IAA2BO,YAA/B,EAA6C;AAClDL,QAAAA,GAAG,GAAG;AACJC,UAAAA,SAAS,EAAE,MADP;AAEJV,UAAAA,OAAO,EAAEc,YAFL;AAGJH,UAAAA,EAAE,EAAEL,OAAO,CAAC,IAAD,CAHP;AAIJM,UAAAA,MAAM,EAAEL,WAAW,CAAC,QAAD,CAAX,GAAwB;AAJ5B,SAAN;AAMAX,QAAAA,QAAQ,CAACiB,IAAT,CAAcJ,GAAd;AACD;AACF,KAnBD;AAoBAM,IAAAA,OAAO,CAACC,GAAR,CAAYpB,QAAZ;AACD,GAlCD,CAkCE,OAAOqB,KAAP,EAAc;AACdF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACD;AACF,CAtCD;;AAwCA,MAAMC,kBAAkB,GAAG,YAAY;AACrC,QAAMpB,OAAO,GAAG,MAAML,aAAa,CAChCM,qBADmB,GAEnBC,OAFmB,CAEX,4DAFW,EAGnBC,OAHmB,CAGXd,SAHW,EAInBe,KAJmB,CAIb,EAJa,EAKnBC,EALmB,EAAtB;AAOA,QAAMgB,GAAG,GAAGrB,OAAO,CAAC,cAAD,CAAnB;AAEA,SAAOqB,GAAP;AACD,CAXD;;AAaA,SAASD,kBAAT","sourcesContent":["import algosdk from \"algosdk\";\r\n\r\nconst port = \"\";\r\nconst CHOICE_ID = 21364625;\r\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\nconst indexerAddress = \"https://testnet-algorand.api.purestake.io/idx2\";\r\nconst token = { \"X-API-Key\": \"fi0QdbiBVl8hsVMCA2SUg6jnQdvAzxY48Zy2G6Yc\" };\r\n\r\nconst algodClient = new algosdk.Algodv2(token, baseServer, port);\r\n\r\nconst indexerClient = new algosdk.Indexer(token, indexerAddress, port);\r\n\r\nconst getTotal = async () => {\r\n  try {\r\n    let txnArray = [];\r\n    let userAddress =\r\n      \"S76LPUPTSGL56BUGRKEQSWEDQ6VSMP62FPE3XJDREJ2XIDWQC36DL2KDJQ\";\r\n    let pastTxn = await indexerClient\r\n      .searchForTransactions()\r\n      .address(userAddress)\r\n      .assetID(CHOICE_ID)\r\n      .limit(20)\r\n      .do();\r\n\r\n    const txns = pastTxn[\"transactions\"];\r\n\r\n    txns.forEach((element) => {\r\n      const transaction = element[\"asset-transfer-transaction\"];\r\n      if (transaction[\"receiver\"] == red_address) {\r\n        obj = {\r\n          candidate: \"Red\",\r\n          address: red_address,\r\n          Id: element[\"id\"],\r\n          amount: transaction[\"amount\"] / 100,\r\n        };\r\n        txnArray.push(obj);\r\n      } else if (transaction[\"receiver\"] == blue_address) {\r\n        obj = {\r\n          candidate: \"Blue\",\r\n          address: blue_address,\r\n          Id: element[\"id\"],\r\n          amount: transaction[\"amount\"] / 100,\r\n        };\r\n        txnArray.push(obj);\r\n      }\r\n    });\r\n    console.log(txnArray);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst getCommittedAmount = async () => {\r\n  const pastTxn = await indexerClient\r\n    .searchForTransactions()\r\n    .address(\"S76LPUPTSGL56BUGRKEQSWEDQ6VSMP62FPE3XJDREJ2XIDWQC36DL2KDJQ\")\r\n    .assetID(CHOICE_ID)\r\n    .limit(20)\r\n    .do();\r\n\r\n  const txn = pastTxn[\"transactions\"];\r\n\r\n  return txn;\r\n};\r\n\r\nexport { getCommittedAmount };\r\n"]},"metadata":{},"sourceType":"module"}