{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Williams\\\\Desktop\\\\App\\\\choice-voting-app\\\\frontend\\\\src\\\\statics\\\\PopFromBottomModalToVote.js\",\n    _s = $RefreshSig$();\n\nimport ScrollText from \"./ScrollText\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport algosdk from \"algosdk\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ASSET_ID } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PopFromBottomModalToVote = () => {\n  _s();\n\n  const dispatch = useDispatch(); // algod Client\n\n  const algodClient = new algosdk.Algodv2({\n    \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \"\n  }, \"https://testnet-algorand.api.purestake.io/ps2\", \"\");\n  const walletAddress = localStorage.getItem(\"address\");\n  const {\n    openModalVote,\n    voteData\n  } = useSelector(state => state.status.voteModal);\n\n  const myAlgoConnect = async () => {\n    const myAlgoWallet = new MyAlgoConnect();\n\n    try {\n      const accounts = await myAlgoWallet.connect({\n        shouldSelectOneAccount: true\n      });\n      const address = accounts[0].address;\n      const myAccountInfo = await algodClient.accountInformation(walletAddress).do(); // get balance of the voter\n\n      const balance = myAccountInfo.assets ? myAccountInfo.assets.find(element => element[\"asset-id\"] === ASSET_ID).amount / 100 : 0; // check if the voter address has Choice\n\n      const containsChoice = myAccountInfo.assets ? myAccountInfo.assets.some(element => element[\"asset-id\"] === ASSET_ID) : false; // if the address has no ASAs\n\n      if (myAccountInfo.assets.length === 0) {\n        alert(\"You need to optin to Choice Coin\");\n        dispatch({\n          type: \"close_vote_modal\"\n        });\n        return;\n      }\n\n      if (!containsChoice) {\n        alert(\"You need to optin to Choice Coin\");\n        dispatch({\n          type: \"close_vote_modal\"\n        });\n        return;\n      }\n\n      if (voteData.amount > balance) {\n        alert(\"You do not have sufficient balance to make this transaction.\");\n        return;\n      }\n\n      const suggestedParams = await algodClient.getTransactionParams().do();\n      const amountToSend = voteData.amount * 100;\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n        from: address,\n        to: voteData.address,\n        amount: amountToSend,\n        assetIndex: ASSET_ID,\n        suggestedParams\n      });\n      const signedTxn = await myAlgoWallet.signTransaction(txn.toByte());\n      await algodClient.sendRawTransaction(signedTxn.blob).do(); // close modal.\n\n      dispatch({\n        type: \"close_vote_modal\"\n      }); // alert success\n\n      alert(\"You have successfully placed your vote for this election\");\n      window.location.reload();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const algoSignerConnect = async () => {\n    try {\n      if (typeof window.AlgoSigner === \"undefined\") {\n        window.open(\"https://chrome.google.com/webstore/detail/algosigner/kmmolakhbgdlpkjkcjkebenjheonagdm\", \"_blank\");\n      } else {\n        const accounts = await window.AlgoSigner.accounts({\n          ledger: \"TestNet\"\n        });\n        const address = accounts[0].address; // if the address trying to vote is the same as the election creator\n\n        if (address === voteData.election.wallet.address) {\n          alert(\"You cannot vote in an election you created\");\n          dispatch({\n            type: \"close_vote_modal\"\n          });\n          return;\n        }\n\n        const myAccountInfo = await algodClient.accountInformation(walletAddress).do(); // get balance of the voter\n\n        const balance = myAccountInfo.assets ? myAccountInfo.assets.find(element => element[\"asset-id\"] === ASSET_ID).amount / 100 : 0; // check if the voter address has Choice\n\n        const containsChoice = myAccountInfo.assets ? myAccountInfo.assets.some(element => element[\"asset-id\"] === ASSET_ID) : false; // if the address has no ASAs\n\n        if (myAccountInfo.assets.length === 0) {\n          alert(\"You need to optin to Choice Coin\");\n          dispatch({\n            type: \"close_vote_modal\"\n          });\n          return;\n        }\n\n        if (!containsChoice) {\n          alert(\"You need to optin to Choice Coin\");\n          dispatch({\n            type: \"close_vote_modal\"\n          });\n          return;\n        }\n\n        if (voteData.amount > balance) {\n          alert(\"You do not have sufficient balance to make this transaction.\");\n          return;\n        }\n\n        const suggestedParams = await algodClient.getTransactionParams().do();\n        const amountToSend = voteData.amount * 100;\n        const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n          from: address,\n          to: voteData.address,\n          amount: amountToSend,\n          assetIndex: ASSET_ID,\n          suggestedParams\n        });\n        const signedTxn = await window.AlgoSigner.signTxn([{\n          txn: window.AlgoSigner.encoding.msgpackToBase64(txn.toByte())\n        }]);\n        await algodClient.sendRawTransaction(window.AlgoSigner.encoding.base64ToMsgpack(signedTxn[0].blob)).do(); // close modal.\n\n        dispatch({\n          type: \"close_vote_modal\"\n        }); // alert success\n\n        alert(\"You have successfully placed your vote for this election\");\n      }\n    } catch (error) {\n      alert(\"An error occured while trying to connect AlgoSigner\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"menu\", {\n    className: \"mn_sm\",\n    style: {\n      display: `${!!openModalVote ? \"flex\" : \"none\"}`\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        flex: 1\n      },\n      onClick: () => {\n        dispatch({\n          type: \"close_vote_modal\"\n        });\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mn_sm_modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mn_sm_modal_inn\",\n        children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"algo_connect_hd\",\n            children: \"Select Wallet to continue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connect_butt\",\n            onClick: myAlgoConnect,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"connect_wallet_img\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"https://i.postimg.cc/76r9kXSr/My-Algo-Logo-4c21daa4.png\",\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"connect_wallet_txt\",\n              children: \"My Algo Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connect_butt\",\n            onClick: algoSignerConnect,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"connect_wallet_img\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"https://i.postimg.cc/L4JB4JwT/Algo-Signer-2ec35000.png\",\n                alt: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"connect_wallet_txt\",\n              children: typeof AlgoSigner === undefined ? \"Install AlgoSigner\" : \"AlgoSigner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(ScrollText, {\n          word: \"Decentralized decisions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PopFromBottomModalToVote, \"qNVN4zJ47ztHIO1v3vkr8uctnL4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PopFromBottomModalToVote;\nexport default PopFromBottomModalToVote;\n\nvar _c;\n\n$RefreshReg$(_c, \"PopFromBottomModalToVote\");","map":{"version":3,"sources":["C:/Users/Williams/Desktop/App/choice-voting-app/frontend/src/statics/PopFromBottomModalToVote.js"],"names":["ScrollText","MyAlgoConnect","algosdk","useSelector","useDispatch","ASSET_ID","PopFromBottomModalToVote","dispatch","algodClient","Algodv2","walletAddress","localStorage","getItem","openModalVote","voteData","state","status","voteModal","myAlgoConnect","myAlgoWallet","accounts","connect","shouldSelectOneAccount","address","myAccountInfo","accountInformation","do","balance","assets","find","element","amount","containsChoice","some","length","alert","type","suggestedParams","getTransactionParams","amountToSend","txn","makeAssetTransferTxnWithSuggestedParamsFromObject","from","to","assetIndex","signedTxn","signTransaction","toByte","sendRawTransaction","blob","window","location","reload","error","console","log","algoSignerConnect","AlgoSigner","open","ledger","election","wallet","signTxn","encoding","msgpackToBase64","base64ToMsgpack","display","width","flex","undefined"],"mappings":"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","sourcesContent":["import ScrollText from \"./ScrollText\";\r\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\r\nimport algosdk from \"algosdk\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ASSET_ID } from \"../constants\";\r\n\r\nconst PopFromBottomModalToVote = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // algod Client\r\n  const algodClient = new algosdk.Algodv2(\r\n    {\r\n      \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \",\r\n    },\r\n    \"https://testnet-algorand.api.purestake.io/ps2\",\r\n    \"\"\r\n  );\r\n\r\n  const walletAddress = localStorage.getItem(\"address\");\r\n\r\n  const { openModalVote, voteData } = useSelector(\r\n    (state) => state.status.voteModal\r\n  );\r\n\r\n  const myAlgoConnect = async () => {\r\n    const myAlgoWallet = new MyAlgoConnect();\r\n\r\n    try {\r\n      const accounts = await myAlgoWallet.connect({\r\n        shouldSelectOneAccount: true,\r\n      });\r\n      const address = accounts[0].address;\r\n\r\n      const myAccountInfo = await algodClient\r\n        .accountInformation(walletAddress)\r\n        .do();\r\n\r\n      // get balance of the voter\r\n      const balance = myAccountInfo.assets\r\n        ? myAccountInfo.assets.find(\r\n            (element) => element[\"asset-id\"] === ASSET_ID\r\n          ).amount / 100\r\n        : 0;\r\n\r\n      // check if the voter address has Choice\r\n      const containsChoice = myAccountInfo.assets\r\n        ? myAccountInfo.assets.some(\r\n            (element) => element[\"asset-id\"] === ASSET_ID\r\n          )\r\n        : false;\r\n\r\n      // if the address has no ASAs\r\n      if (myAccountInfo.assets.length === 0) {\r\n        alert(\"You need to optin to Choice Coin\");\r\n        dispatch({ type: \"close_vote_modal\" });\r\n        return;\r\n      }\r\n\r\n      if (!containsChoice) {\r\n        alert(\"You need to optin to Choice Coin\");\r\n        dispatch({ type: \"close_vote_modal\" });\r\n        return;\r\n      }\r\n\r\n      if (voteData.amount > balance) {\r\n        alert(\"You do not have sufficient balance to make this transaction.\");\r\n        return;\r\n      }\r\n\r\n      const suggestedParams = await algodClient.getTransactionParams().do();\r\n      const amountToSend = voteData.amount * 100;\r\n\r\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n        from: address,\r\n        to: voteData.address,\r\n        amount: amountToSend,\r\n        assetIndex: ASSET_ID,\r\n        suggestedParams,\r\n      });\r\n\r\n      const signedTxn = await myAlgoWallet.signTransaction(txn.toByte());\r\n      await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n\r\n      // close modal.\r\n      dispatch({ type: \"close_vote_modal\" });\r\n\r\n      // alert success\r\n      alert(\"You have successfully placed your vote for this election\");\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const algoSignerConnect = async () => {\r\n    try {\r\n      if (typeof window.AlgoSigner === \"undefined\") {\r\n        window.open(\r\n          \"https://chrome.google.com/webstore/detail/algosigner/kmmolakhbgdlpkjkcjkebenjheonagdm\",\r\n          \"_blank\"\r\n        );\r\n      } else {\r\n        const accounts = await window.AlgoSigner.accounts({\r\n          ledger: \"TestNet\",\r\n        });\r\n        const address = accounts[0].address;\r\n\r\n        // if the address trying to vote is the same as the election creator\r\n        if (address === voteData.election.wallet.address) {\r\n          alert(\"You cannot vote in an election you created\");\r\n          dispatch({ type: \"close_vote_modal\" });\r\n          return;\r\n        }\r\n\r\n        const myAccountInfo = await algodClient\r\n          .accountInformation(walletAddress)\r\n          .do();\r\n\r\n        // get balance of the voter\r\n        const balance = myAccountInfo.assets\r\n          ? myAccountInfo.assets.find(\r\n              (element) => element[\"asset-id\"] === ASSET_ID\r\n            ).amount / 100\r\n          : 0;\r\n\r\n        // check if the voter address has Choice\r\n        const containsChoice = myAccountInfo.assets\r\n          ? myAccountInfo.assets.some(\r\n              (element) => element[\"asset-id\"] === ASSET_ID\r\n            )\r\n          : false;\r\n\r\n        // if the address has no ASAs\r\n        if (myAccountInfo.assets.length === 0) {\r\n          alert(\"You need to optin to Choice Coin\");\r\n          dispatch({ type: \"close_vote_modal\" });\r\n          return;\r\n        }\r\n\r\n        if (!containsChoice) {\r\n          alert(\"You need to optin to Choice Coin\");\r\n          dispatch({ type: \"close_vote_modal\" });\r\n          return;\r\n        }\r\n\r\n        if (voteData.amount > balance) {\r\n          alert(\"You do not have sufficient balance to make this transaction.\");\r\n          return;\r\n        }\r\n\r\n        const suggestedParams = await algodClient.getTransactionParams().do();\r\n        const amountToSend = voteData.amount * 100;\r\n\r\n        const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n          from: address,\r\n          to: voteData.address,\r\n          amount: amountToSend,\r\n          assetIndex: ASSET_ID,\r\n          suggestedParams,\r\n        });\r\n\r\n        const signedTxn = await window.AlgoSigner.signTxn([\r\n          { txn: window.AlgoSigner.encoding.msgpackToBase64(txn.toByte()) },\r\n        ]);\r\n        await algodClient\r\n          .sendRawTransaction(\r\n            window.AlgoSigner.encoding.base64ToMsgpack(signedTxn[0].blob)\r\n          )\r\n          .do();\r\n\r\n        // close modal.\r\n        dispatch({ type: \"close_vote_modal\" });\r\n\r\n        // alert success\r\n        alert(\"You have successfully placed your vote for this election\");\r\n      }\r\n    } catch (error) {\r\n      alert(\"An error occured while trying to connect AlgoSigner\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <menu\r\n      className=\"mn_sm\"\r\n      style={{ display: `${!!openModalVote ? \"flex\" : \"none\"}` }}\r\n    >\r\n      <div\r\n        style={{ width: \"100%\", flex: 1 }}\r\n        onClick={() => {\r\n          dispatch({ type: \"close_vote_modal\" });\r\n        }}\r\n      ></div>\r\n\r\n      <div className=\"mn_sm_modal\">\r\n        <div className=\"mn_sm_modal_inn\">\r\n          <>\r\n            <div className=\"algo_connect_hd\">Select Wallet to continue</div>\r\n\r\n            <div className=\"connect_butt\" onClick={myAlgoConnect}>\r\n              <div className=\"connect_wallet_img\">\r\n                <img\r\n                  src=\"https://i.postimg.cc/76r9kXSr/My-Algo-Logo-4c21daa4.png\"\r\n                  alt=\"\"\r\n                />\r\n              </div>\r\n              <p className=\"connect_wallet_txt\">My Algo Wallet</p>\r\n            </div>\r\n            <div className=\"connect_butt\" onClick={algoSignerConnect}>\r\n              <div className=\"connect_wallet_img\">\r\n                <img\r\n                  src=\"https://i.postimg.cc/L4JB4JwT/Algo-Signer-2ec35000.png\"\r\n                  alt=\"\"\r\n                />\r\n              </div>\r\n              <p className=\"connect_wallet_txt\">\r\n                {typeof AlgoSigner === undefined\r\n                  ? \"Install AlgoSigner\"\r\n                  : \"AlgoSigner\"}\r\n              </p>\r\n            </div>\r\n          </>\r\n\r\n          <ScrollText word={\"Decentralized decisions\"} />\r\n        </div>\r\n      </div>\r\n    </menu>\r\n  );\r\n};\r\n\r\nexport default PopFromBottomModalToVote;\r\n"]},"metadata":{},"sourceType":"module"}