{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Williams\\\\Desktop\\\\App\\\\choice-voting-app\\\\frontend\\\\src\\\\transfer\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport \"../styles/transfer.css\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ASSET_ID } from \"../constants\";\nimport algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  const [amount, setAmount] = useState(0);\n  const [addr, setAddr] = useState(\"\");\n  const [balance, setBalance] = useState(0);\n  const dispatch = useDispatch(); // algod Client\n\n  const algodClient = new algosdk.Algodv2({\n    \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \"\n  }, \"https://testnet-algorand.api.purestake.io/ps2\", \"\");\n  const myAlgoWallet = new MyAlgoConnect(); // wallet-type & address\n\n  const walletType = localStorage.getItem(\"wallet-type\");\n  const walletAddress = localStorage.getItem(\"address\");\n\n  const makeTransfer = async () => {\n    // check if localStorage items were deleted.\n    if (!walletType || !walletAddress) {\n      dispatch({\n        type: \"modal_connect\"\n      });\n      return;\n    }\n\n    const myAccountInfo = await algodClient.accountInformation(walletAddress).do();\n\n    if (myAccountInfo.assets.length === 0) {\n      alert(\"You need to optin to Choice Coin\");\n      return;\n    } // const receiverAccountInfo = await algodClient.accountInformation(addr).do();\n    // compare amount to send with user balance\n\n\n    if (amount > balance) {\n      alert(\"You do not have sufficient balance to make this transaction.\");\n      return;\n    } // send choice to wallet\n\n\n    const suggestedParams = await algodClient.getTransactionParams().do();\n    const amountToSend = Math.abs(amount * 100); // console.log(typeof amountToSend, amountToSend);\n\n    const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\n      from: walletAddress,\n      to: addr,\n      amount: amountToSend,\n      assetIndex: ASSET_ID,\n      suggestedParams\n    }); // based on wallet type\n\n    try {\n      if (walletType === \"my-algo\") {\n        const signedTxn = await myAlgoWallet.signTransaction(txn.toByte());\n        await algodClient.sendRawTransaction(signedTxn.blob).do();\n      } else if (walletType === \"algosigner\") {\n        const signedTxn = await window.AlgoSigner.signTxn([{\n          txn: window.AlgoSigner.encoding.msgpackToBase64(txn.toByte())\n        }]);\n        await algodClient.sendRawTransaction(window.AlgoSigner.encoding.base64ToMsgpack(signedTxn[0].blob)).do();\n      }\n\n      alert(`${amount} $CHOICE sent successfully to ${addr}!`);\n    } catch (error) {\n      console.log(error);\n      window.location.reload();\n    }\n  };\n\n  const setMaxBalance = () => {\n    setAmount(balance);\n  };\n\n  useEffect(() => {\n    const setMyBalance = async () => {\n      const myAccountInfo = await algodClient.accountInformation(walletAddress).do();\n      const b = myAccountInfo.assets ? myAccountInfo.assets.find(element => element[\"asset-id\"] === ASSET_ID).amount / 100 : 0;\n      setBalance(b);\n    };\n\n    setMyBalance(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transfer_cont\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transfer_cont_inn\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"trans_hd\",\n        children: \"Transfer Choices To Any Address here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"transf_inps\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transf_input_cover\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"trsf_amt\",\n            children: \"Amount to send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              flexDirection: \"row\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: amount,\n              onChange: e => setAmount(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"trsf_max\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: setMaxBalance,\n                children: \"Max\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"30px\",\n            height: \"30px\",\n            display: \"flex\",\n            fontSize: \"17px\",\n            borderRadius: \"100%\",\n            alignItems: \"center\",\n            margin: \"10px 0px\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            border: \"1px solid var(--txt-alt)\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"uil uil-exchange\",\n            style: {\n              transform: \"rotate(90deg)\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transf_input_cover\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: addr,\n            placeholder: \"Wallet address to send to\",\n            onChange: e => setAddr(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"submitTrsf\",\n          onClick: makeTransfer,\n          children: \"Transfer Assets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Index, \"OQ0Hf+3vP7XNu/D4A24rmSpNhb0=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/Williams/Desktop/App/choice-voting-app/frontend/src/transfer/index.js"],"names":["useEffect","useState","useDispatch","ASSET_ID","algosdk","MyAlgoConnect","Index","amount","setAmount","addr","setAddr","balance","setBalance","dispatch","algodClient","Algodv2","myAlgoWallet","walletType","localStorage","getItem","walletAddress","makeTransfer","type","myAccountInfo","accountInformation","do","assets","length","alert","suggestedParams","getTransactionParams","amountToSend","Math","abs","txn","makeAssetTransferTxnWithSuggestedParamsFromObject","from","to","assetIndex","signedTxn","signTransaction","toByte","sendRawTransaction","blob","window","AlgoSigner","signTxn","encoding","msgpackToBase64","base64ToMsgpack","error","console","log","location","reload","setMaxBalance","setMyBalance","b","find","element","display","flexDirection","e","target","value","width","height","fontSize","borderRadius","alignItems","margin","justifyContent","border","transform"],"mappings":"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","sourcesContent":["import \"../styles/transfer.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ASSET_ID } from \"../constants\";\r\nimport algosdk from \"algosdk\";\r\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\r\n\r\nconst Index = () => {\r\n  const [amount, setAmount] = useState(0);\r\n  const [addr, setAddr] = useState(\"\");\r\n\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // algod Client\r\n  const algodClient = new algosdk.Algodv2(\r\n    {\r\n      \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \",\r\n    },\r\n    \"https://testnet-algorand.api.purestake.io/ps2\",\r\n    \"\"\r\n  );\r\n\r\n  const myAlgoWallet = new MyAlgoConnect();\r\n\r\n  // wallet-type & address\r\n  const walletType = localStorage.getItem(\"wallet-type\");\r\n  const walletAddress = localStorage.getItem(\"address\");\r\n\r\n  const makeTransfer = async () => {\r\n    // check if localStorage items were deleted.\r\n    if (!walletType || !walletAddress) {\r\n      dispatch({ type: \"modal_connect\" });\r\n      return;\r\n    }\r\n\r\n    const myAccountInfo = await algodClient\r\n      .accountInformation(walletAddress)\r\n      .do();\r\n\r\n    if (myAccountInfo.assets.length === 0) {\r\n      alert(\"You need to optin to Choice Coin\");\r\n      return;\r\n    }\r\n\r\n    // const receiverAccountInfo = await algodClient.accountInformation(addr).do();\r\n\r\n    // compare amount to send with user balance\r\n    if (amount > balance) {\r\n      alert(\"You do not have sufficient balance to make this transaction.\");\r\n      return;\r\n    }\r\n\r\n    // send choice to wallet\r\n    const suggestedParams = await algodClient.getTransactionParams().do();\r\n    const amountToSend = Math.abs(amount * 100);\r\n    // console.log(typeof amountToSend, amountToSend);\r\n\r\n    const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n      from: walletAddress,\r\n      to: addr,\r\n      amount: amountToSend,\r\n      assetIndex: ASSET_ID,\r\n      suggestedParams,\r\n    });\r\n\r\n    // based on wallet type\r\n    try {\r\n      if (walletType === \"my-algo\") {\r\n        const signedTxn = await myAlgoWallet.signTransaction(txn.toByte());\r\n        await algodClient.sendRawTransaction(signedTxn.blob).do();\r\n      } else if (walletType === \"algosigner\") {\r\n        const signedTxn = await window.AlgoSigner.signTxn([\r\n          { txn: window.AlgoSigner.encoding.msgpackToBase64(txn.toByte()) },\r\n        ]);\r\n        await algodClient\r\n          .sendRawTransaction(\r\n            window.AlgoSigner.encoding.base64ToMsgpack(signedTxn[0].blob)\r\n          )\r\n          .do();\r\n      }\r\n\r\n      alert(`${amount} $CHOICE sent successfully to ${addr}!`);\r\n    } catch (error) {\r\n      console.log(error);\r\n      window.location.reload();\r\n    }\r\n  };\r\n\r\n  const setMaxBalance = () => {\r\n    setAmount(balance);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const setMyBalance = async () => {\r\n      const myAccountInfo = await algodClient\r\n        .accountInformation(walletAddress)\r\n        .do();\r\n\r\n      const b = myAccountInfo.assets\r\n        ? myAccountInfo.assets.find(\r\n            (element) => element[\"asset-id\"] === ASSET_ID\r\n          ).amount / 100\r\n        : 0;\r\n\r\n      setBalance(b);\r\n    };\r\n\r\n    setMyBalance();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"transfer_cont\">\r\n      <div className=\"transfer_cont_inn\">\r\n        <div className=\"trans_hd\">Transfer Choices To Any Address here</div>\r\n\r\n        <div className=\"transf_inps\">\r\n          <div className=\"transf_input_cover\">\r\n            <p className=\"trsf_amt\">Amount to send</p>\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n              <input\r\n                type=\"number\"\r\n                value={amount}\r\n                onChange={(e) => setAmount(e.target.value)}\r\n              />\r\n\r\n              <div className=\"trsf_max\">\r\n                <button onClick={setMaxBalance}>Max</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div\r\n            style={{\r\n              width: \"30px\",\r\n              height: \"30px\",\r\n              display: \"flex\",\r\n              fontSize: \"17px\",\r\n              borderRadius: \"100%\",\r\n              alignItems: \"center\",\r\n              margin: \"10px 0px\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n              border: \"1px solid var(--txt-alt)\",\r\n            }}\r\n          >\r\n            <i\r\n              className=\"uil uil-exchange\"\r\n              style={{ transform: \"rotate(90deg)\" }}\r\n            ></i>\r\n          </div>\r\n\r\n          <div className=\"transf_input_cover\">\r\n            <input\r\n              type=\"text\"\r\n              value={addr}\r\n              placeholder=\"Wallet address to send to\"\r\n              onChange={(e) => setAddr(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          <button className=\"submitTrsf\" onClick={makeTransfer}>\r\n            Transfer Assets\r\n          </button>\r\n\r\n          {/*  */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}