{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Williams\\\\Desktop\\\\App\\\\choice-voting-app\\\\frontend\\\\src\\\\elections\\\\create.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\nimport axios from \"axios\";\nimport algosdk from \"algosdk\";\nimport \"../styles/createelection.css\";\nimport { URL } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CreateElection = () => {\n  _s();\n\n  // algod Client\n  const algodClient = new algosdk.Algodv2({\n    \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \"\n  }, \"https://testnet-algorand.api.purestake.io/ps2\", \"\");\n  const myAlgoWallet = new MyAlgoConnect(); // wallet-type & address\n\n  const walletType = localStorage.getItem(\"wallet-type\");\n  const walletAddress = localStorage.getItem(\"address\");\n  const dispatch = useDispatch();\n  const [items, setitems] = useState([]);\n  const [itemInp, setItemInp] = useState(\"\");\n  const [processTit, setProcessTit] = useState(\"\");\n  const [electionDescription, setElectionDesciption] = useState(\"\");\n  const [choiceToSend, setChoiceToSend] = useState(1);\n  const hdImgPicker = useRef(null);\n  const itemImgPicker = useRef(null);\n  const [hdImg, setHdImg] = useState(null);\n  const [itemImg, setItemImg] = useState(null);\n\n  const addHeaderImage = e => {\n    const reader = new FileReader();\n\n    if (e.target.files[0]) {\n      reader.readAsDataURL(e.target.files[0]);\n    }\n\n    reader.onload = readerEvent => {\n      setHdImg(readerEvent.target.result);\n    };\n  };\n\n  const addItemImg = e => {\n    const reader = new FileReader();\n\n    if (e.target.files[0]) {\n      reader.readAsDataURL(e.target.files[0]);\n    }\n\n    reader.onload = readerEvent => {\n      setItemImg(readerEvent.target.result);\n    };\n  };\n\n  const addItem = () => {\n    if (itemInp.trim().length > 0 && !items.includes(itemInp)) {\n      setitems(prev => [...prev, {\n        name: itemInp,\n        image: itemImg ? itemImg : \"\"\n      }]);\n      setItemInp(\"\");\n      setItemImg(null);\n    }\n\n    return;\n  };\n\n  const removeItem = item => {\n    setitems(items === null || items === void 0 ? void 0 : items.filter(it => it !== item));\n  };\n\n  const createCandidates = candidates => {\n    const candidatesCred = [];\n\n    for (let candidate of candidates) {\n      const {\n        sk: private_key,\n        addr: address\n      } = algosdk.generateAccount();\n      candidatesCred.push({ ...candidate,\n        private_key: algosdk.secretKeyToMnemonic(private_key),\n        address\n      });\n    }\n\n    return candidatesCred;\n  }; // send 1ALGO to all candidates\n\n\n  const topUpCandidates = async candidates => {\n    // array to store all txn object for all candidates\n    const txns = [];\n    const AMOUNT = 1000000;\n    const suggestedParams = await algodClient.getTransactionParams().do();\n\n    for (let candidate of candidates) {\n      const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: walletAddress,\n        to: candidate.address,\n        amount: AMOUNT,\n        suggestedParams\n      });\n      txns.push(txn);\n    } // get the group ID and assign to all transactions\n\n\n    const groupID = algosdk.computeGroupID(txns);\n\n    for (let i = 0; i < txns.length; i++) txns[i].group = groupID; // sign txns based on the wallet used to login\n\n\n    let continueExecution = true;\n\n    try {\n      if (walletType === \"algosigner\") {\n        const signedTxns = await window.AlgoSigner.signTxn(txns.map(txn => ({\n          txn: window.AlgoSigner.encoding.msgpackToBase64(txn.toByte())\n        })));\n        await algodClient.sendRawTransaction(signedTxns.map(txn => window.AlgoSigner.encoding.base64ToMsgpack(txn.blob))).do();\n      } else if (walletType === \"my-algo\") {\n        const signedTxns = await myAlgoWallet.signTransaction(txns.map(txn => txn.toByte())); // send the transactions to the net.\n\n        await algodClient.sendRawTransaction(signedTxns.map(txn => txn.blob)).do();\n      }\n    } catch (error) {\n      console.log(error);\n      continueExecution = false;\n    }\n\n    return continueExecution;\n  };\n\n  const optinCandidates = async candidates => {\n    // choice coin asset ID\n    const assetIndex = 21364625; // amount of CHoice to send. `0` for Opt In\n\n    const amount = 0;\n    const suggestedParams = await algodClient.getTransactionParams().do();\n\n    for (let candidate of candidates) {\n      const transactionOptions = {\n        from: candidate.address,\n        to: candidate.address,\n        closeRemainderTo: undefined,\n        revocationTarget: undefined,\n        amount,\n        assetIndex,\n        suggestedParams\n      };\n      const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject(transactionOptions);\n      const {\n        _,\n        sk\n      } = algosdk.mnemonicToSecretKey(candidate.private_key);\n      const signedTxn = txn.signTxn(sk); // send the transactions to the net.\n\n      await algodClient.sendRawTransaction(signedTxn).do();\n    }\n  }; // Create Election Function\n\n\n  const createElection = async () => {\n    // check if localStorage items were deleted.\n    if (!walletType || !walletAddress) {\n      dispatch({\n        type: \"modal_connect\"\n      });\n      return;\n    }\n\n    if (processTit.trim().length < 1) {\n      alert(\"Process Title required!\");\n      return;\n    }\n\n    if (items.length < 2) {\n      alert(\"Minimum of two candidates required!\");\n      return;\n    } // check if the user has sufficient balance to go on with the transaction\n\n\n    const accountInformation = await algodClient.accountInformation(walletAddress).do();\n    const myBalance = accountInformation.amount / 1000000;\n\n    if (myBalance < items.length * choiceToSend + 1) {\n      alert(\"Your balance does not meet the requirement to create an election with specified candidates.\");\n      return;\n    }\n\n    const electionData = {\n      process_image: hdImg ? hdImg : \"\",\n      candidates: items,\n      processTit,\n      electionDescription,\n      choiceToSend\n    }; // create candidates address and secretKey\n\n    const updatedCandidates = createCandidates(electionData.candidates);\n    topUpCandidates(updatedCandidates).then(continueExecution => {\n      if (continueExecution) {\n        optinCandidates(updatedCandidates).then(() => {\n          const headers = {\n            \"X-Wallet-Address\": walletAddress\n          }; // add choice per vote input\n\n          axios.post(`${URL}/elections/create`, {\n            candidates: updatedCandidates,\n            choice_per_vote: electionData.choiceToSend,\n            process_image: electionData.process_image,\n            title: electionData.processTit,\n            description: electionData.electionDescription\n          }, {\n            headers\n          }).then(response => {\n            alert(response.data.message);\n            window.location.reload();\n          });\n        });\n      }\n    }); // Reset Inputs\n    // setitems([]);\n    // setHdImg(null);\n    // setItemInp(\"\");\n    // setProcessTit(\"\");\n    // setChoiceToSend(0);\n    // setElectionDesciption(\"\");\n    // Can redirect here\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create_elt\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create_elt_inn\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crt_hd\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Recently Created Elections\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vote_sect\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"vote_sect_img\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"vote_hd_img\",\n            children: hdImg ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: hdImg,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"uil uil-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            ref: hdImgPicker,\n            hidden: true,\n            onChange: addHeaderImage,\n            type: \"file\",\n            accept: \".jpg, .jpeg, .png\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"vote_add_img\",\n            onClick: () => hdImgPicker.current.click(),\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Add Election Header Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"v_inp_cov inpCont_cand\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"inp_tit\",\n            children: \"Election Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"eg. Best cryptocurrency\",\n            value: processTit,\n            onChange: e => setProcessTit(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ensure_txt\",\n            children: \"Entries must be of minimum length of one.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"v_inp_cov inpCont_cand\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"inp_tit\",\n            children: \"Election Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Describe process\",\n            value: electionDescription,\n            onChange: e => setElectionDesciption(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ensure_txt\",\n            children: \"A meaningful text to describe your election process.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"v_inp_cov inpCont_cand\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"inp_tit\",\n            children: \"Choice per vote\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: choiceToSend,\n            min: \"1\",\n            onChange: e => setChoiceToSend(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ensure_txt\",\n            children: \"Amount of $CHOICE required to participate in this election\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"v_inp_cov inpCont_cand\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"inp_tit\",\n            children: \"Candidates\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"add_item_sect\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"add_item_sect_r1\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Choice Coin\",\n                value: itemInp,\n                onChange: e => setItemInp(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item_img_preview\",\n                children: itemImg ? /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: itemImg,\n                  alt: \"\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 21\n                }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"uil uil-image\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 346,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                ref: itemImgPicker,\n                hidden: true,\n                onChange: addItemImg,\n                type: \"file\",\n                accept: \".jpg, .jpeg, .png\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"add_butt\",\n                onClick: () => itemImgPicker.current.click(),\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Add Image\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 362,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"ensure_txt\",\n              children: \"Entries must be of minimum length of one.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"addItemButt\",\n            onClick: () => addItem(),\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Add Election Participant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), items === null || items === void 0 ? void 0 : items.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item_list\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item_list_img\",\n            children: (item === null || item === void 0 ? void 0 : item.image) ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: item === null || item === void 0 ? void 0 : item.image,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"uil uil-asterisk\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item_list_name\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"rm_butt\",\n            onClick: () => removeItem(item),\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Delete Participant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crt_butt\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: createElection,\n            children: \"Create Election\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"safety\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Safety disclaimer :\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 15\n            }, this), \" We never store your data. Everything is encrypted.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreateElection, \"4svEIScVCx19NJ44uluA8bZkPOQ=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CreateElection;\nexport default CreateElection;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateElection\");","map":{"version":3,"sources":["C:/Users/Williams/Desktop/App/choice-voting-app/frontend/src/elections/create.js"],"names":["useRef","useState","useDispatch","MyAlgoConnect","axios","algosdk","URL","CreateElection","algodClient","Algodv2","myAlgoWallet","walletType","localStorage","getItem","walletAddress","dispatch","items","setitems","itemInp","setItemInp","processTit","setProcessTit","electionDescription","setElectionDesciption","choiceToSend","setChoiceToSend","hdImgPicker","itemImgPicker","hdImg","setHdImg","itemImg","setItemImg","addHeaderImage","e","reader","FileReader","target","files","readAsDataURL","onload","readerEvent","result","addItemImg","addItem","trim","length","includes","prev","name","image","removeItem","item","filter","it","createCandidates","candidates","candidatesCred","candidate","sk","private_key","addr","address","generateAccount","push","secretKeyToMnemonic","topUpCandidates","txns","AMOUNT","suggestedParams","getTransactionParams","do","txn","makePaymentTxnWithSuggestedParamsFromObject","from","to","amount","groupID","computeGroupID","i","group","continueExecution","signedTxns","window","AlgoSigner","signTxn","map","encoding","msgpackToBase64","toByte","sendRawTransaction","base64ToMsgpack","blob","signTransaction","error","console","log","optinCandidates","assetIndex","transactionOptions","closeRemainderTo","undefined","revocationTarget","makeAssetTransferTxnWithSuggestedParamsFromObject","_","mnemonicToSecretKey","signedTxn","createElection","type","alert","accountInformation","myBalance","electionData","process_image","updatedCandidates","then","headers","post","choice_per_vote","title","description","response","data","message","location","reload","current","click","value","index"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\r\nimport axios from \"axios\";\r\nimport algosdk from \"algosdk\";\r\nimport \"../styles/createelection.css\";\r\nimport { URL } from \"../constants\";\r\nconst CreateElection = () => {\r\n  // algod Client\r\n  const algodClient = new algosdk.Algodv2(\r\n    {\r\n      \"X-API-Key\": \"Xy8NsXxfJg2cQ2YQ4pax6aLrTcj55jZ9mbsNCM30 \",\r\n    },\r\n    \"https://testnet-algorand.api.purestake.io/ps2\",\r\n    \"\"\r\n  );\r\n\r\n  const myAlgoWallet = new MyAlgoConnect();\r\n\r\n  // wallet-type & address\r\n  const walletType = localStorage.getItem(\"wallet-type\");\r\n  const walletAddress = localStorage.getItem(\"address\");\r\n\r\n  const dispatch = useDispatch();\r\n  const [items, setitems] = useState([]);\r\n\r\n  const [itemInp, setItemInp] = useState(\"\");\r\n  const [processTit, setProcessTit] = useState(\"\");\r\n  const [electionDescription, setElectionDesciption] = useState(\"\");\r\n\r\n  const [choiceToSend, setChoiceToSend] = useState(1);\r\n\r\n  const hdImgPicker = useRef(null);\r\n  const itemImgPicker = useRef(null);\r\n  const [hdImg, setHdImg] = useState(null);\r\n  const [itemImg, setItemImg] = useState(null);\r\n\r\n  const addHeaderImage = (e) => {\r\n    const reader = new FileReader();\r\n    if (e.target.files[0]) {\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n\r\n    reader.onload = (readerEvent) => {\r\n      setHdImg(readerEvent.target.result);\r\n    };\r\n  };\r\n\r\n  const addItemImg = (e) => {\r\n    const reader = new FileReader();\r\n    if (e.target.files[0]) {\r\n      reader.readAsDataURL(e.target.files[0]);\r\n    }\r\n\r\n    reader.onload = (readerEvent) => {\r\n      setItemImg(readerEvent.target.result);\r\n    };\r\n  };\r\n\r\n  const addItem = () => {\r\n    if (itemInp.trim().length > 0 && !items.includes(itemInp)) {\r\n      setitems((prev) => [\r\n        ...prev,\r\n        { name: itemInp, image: itemImg ? itemImg : \"\" },\r\n      ]);\r\n      setItemInp(\"\");\r\n      setItemImg(null);\r\n    }\r\n    return;\r\n  };\r\n\r\n  const removeItem = (item) => {\r\n    setitems(items?.filter((it) => it !== item));\r\n  };\r\n\r\n  const createCandidates = (candidates) => {\r\n    const candidatesCred = [];\r\n    for (let candidate of candidates) {\r\n      const { sk: private_key, addr: address } = algosdk.generateAccount();\r\n      candidatesCred.push({\r\n        ...candidate,\r\n        private_key: algosdk.secretKeyToMnemonic(private_key),\r\n        address,\r\n      });\r\n    }\r\n\r\n    return candidatesCred;\r\n  };\r\n\r\n  // send 1ALGO to all candidates\r\n  const topUpCandidates = async (candidates) => {\r\n    // array to store all txn object for all candidates\r\n    const txns = [];\r\n    const AMOUNT = 1000000;\r\n\r\n    const suggestedParams = await algodClient.getTransactionParams().do();\r\n\r\n    for (let candidate of candidates) {\r\n      const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n        from: walletAddress,\r\n        to: candidate.address,\r\n        amount: AMOUNT,\r\n        suggestedParams,\r\n      });\r\n      txns.push(txn);\r\n    }\r\n\r\n    // get the group ID and assign to all transactions\r\n    const groupID = algosdk.computeGroupID(txns);\r\n    for (let i = 0; i < txns.length; i++) txns[i].group = groupID;\r\n\r\n    // sign txns based on the wallet used to login\r\n    let continueExecution = true;\r\n    try {\r\n      if (walletType === \"algosigner\") {\r\n        const signedTxns = await window.AlgoSigner.signTxn(\r\n          txns.map((txn) => ({\r\n            txn: window.AlgoSigner.encoding.msgpackToBase64(txn.toByte()),\r\n          }))\r\n        );\r\n        await algodClient\r\n          .sendRawTransaction(\r\n            signedTxns.map((txn) =>\r\n              window.AlgoSigner.encoding.base64ToMsgpack(txn.blob)\r\n            )\r\n          )\r\n          .do();\r\n      } else if (walletType === \"my-algo\") {\r\n        const signedTxns = await myAlgoWallet.signTransaction(\r\n          txns.map((txn) => txn.toByte())\r\n        );\r\n\r\n        // send the transactions to the net.\r\n        await algodClient\r\n          .sendRawTransaction(signedTxns.map((txn) => txn.blob))\r\n          .do();\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      continueExecution = false;\r\n    }\r\n\r\n    return continueExecution;\r\n  };\r\n\r\n  const optinCandidates = async (candidates) => {\r\n    // choice coin asset ID\r\n    const assetIndex = 21364625;\r\n\r\n    // amount of CHoice to send. `0` for Opt In\r\n    const amount = 0;\r\n\r\n    const suggestedParams = await algodClient.getTransactionParams().do();\r\n\r\n    for (let candidate of candidates) {\r\n      const transactionOptions = {\r\n        from: candidate.address,\r\n        to: candidate.address,\r\n        closeRemainderTo: undefined,\r\n        revocationTarget: undefined,\r\n        amount,\r\n        assetIndex,\r\n        suggestedParams,\r\n      };\r\n      const txn =\r\n        algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject(\r\n          transactionOptions\r\n        );\r\n\r\n      const { _, sk } = algosdk.mnemonicToSecretKey(candidate.private_key);\r\n      const signedTxn = txn.signTxn(sk);\r\n\r\n      // send the transactions to the net.\r\n      await algodClient.sendRawTransaction(signedTxn).do();\r\n    }\r\n  };\r\n\r\n  // Create Election Function\r\n  const createElection = async () => {\r\n    // check if localStorage items were deleted.\r\n    if (!walletType || !walletAddress) {\r\n      dispatch({ type: \"modal_connect\" });\r\n      return;\r\n    }\r\n\r\n    if (processTit.trim().length < 1) {\r\n      alert(\"Process Title required!\");\r\n      return;\r\n    }\r\n\r\n    if (items.length < 2) {\r\n      alert(\"Minimum of two candidates required!\");\r\n      return;\r\n    }\r\n\r\n    // check if the user has sufficient balance to go on with the transaction\r\n    const accountInformation = await algodClient\r\n      .accountInformation(walletAddress)\r\n      .do();\r\n    const myBalance = accountInformation.amount / 1000000;\r\n    if (myBalance < items.length * choiceToSend + 1) {\r\n      alert(\r\n        \"Your balance does not meet the requirement to create an election with specified candidates.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    const electionData = {\r\n      process_image: hdImg ? hdImg : \"\",\r\n      candidates: items,\r\n      processTit,\r\n      electionDescription,\r\n      choiceToSend,\r\n    };\r\n\r\n    // create candidates address and secretKey\r\n    const updatedCandidates = createCandidates(electionData.candidates);\r\n\r\n    topUpCandidates(updatedCandidates).then((continueExecution) => {\r\n      if (continueExecution) {\r\n        optinCandidates(updatedCandidates).then(() => {\r\n          const headers = {\r\n            \"X-Wallet-Address\": walletAddress,\r\n          };\r\n          // add choice per vote input\r\n          axios\r\n            .post(\r\n              `${URL}/elections/create`,\r\n              {\r\n                candidates: updatedCandidates,\r\n                choice_per_vote: electionData.choiceToSend,\r\n                process_image: electionData.process_image,\r\n                title: electionData.processTit,\r\n                description: electionData.electionDescription,\r\n              },\r\n              { headers }\r\n            )\r\n            .then((response) => {\r\n              alert(response.data.message);\r\n              window.location.reload();\r\n            });\r\n        });\r\n      }\r\n    });\r\n\r\n    // Reset Inputs\r\n    // setitems([]);\r\n    // setHdImg(null);\r\n    // setItemInp(\"\");\r\n    // setProcessTit(\"\");\r\n    // setChoiceToSend(0);\r\n    // setElectionDesciption(\"\");\r\n\r\n    // Can redirect here\r\n  };\r\n\r\n  return (\r\n    <div className=\"create_elt\">\r\n      <div className=\"create_elt_inn\">\r\n        <div className=\"crt_hd\">\r\n          <p>Recently Created Elections</p>\r\n        </div>\r\n\r\n        {/* **************** */}\r\n        <div className=\"vote_sect\">\r\n          <div className=\"vote_sect_img\">\r\n            <div className=\"vote_hd_img\">\r\n              {hdImg ? (\r\n                <img src={hdImg} alt=\"\" />\r\n              ) : (\r\n                <i className=\"uil uil-image\" />\r\n              )}\r\n            </div>\r\n\r\n            <input\r\n              ref={hdImgPicker}\r\n              hidden\r\n              onChange={addHeaderImage}\r\n              type=\"file\"\r\n              accept=\".jpg, .jpeg, .png\"\r\n            />\r\n\r\n            <div\r\n              className=\"vote_add_img\"\r\n              onClick={() => hdImgPicker.current.click()}\r\n            >\r\n              <p>Add Election Header Image</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"v_inp_cov inpCont_cand\">\r\n            <p className=\"inp_tit\">Election Title</p>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"eg. Best cryptocurrency\"\r\n              value={processTit}\r\n              onChange={(e) => setProcessTit(e.target.value)}\r\n            />\r\n            <p className=\"ensure_txt\">\r\n              Entries must be of minimum length of one.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"v_inp_cov inpCont_cand\">\r\n            <p className=\"inp_tit\">Election Description</p>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Describe process\"\r\n              value={electionDescription}\r\n              onChange={(e) => setElectionDesciption(e.target.value)}\r\n            />\r\n            <p className=\"ensure_txt\">\r\n              A meaningful text to describe your election process.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"v_inp_cov inpCont_cand\">\r\n            <p className=\"inp_tit\">Choice per vote</p>\r\n            <input\r\n              type=\"number\"\r\n              value={choiceToSend}\r\n              min=\"1\"\r\n              onChange={(e) => setChoiceToSend(e.target.value)}\r\n            />\r\n            <p className=\"ensure_txt\">\r\n              Amount of $CHOICE required to participate in this election\r\n            </p>\r\n          </div>\r\n\r\n          {/* ************** */}\r\n          <div className=\"v_inp_cov inpCont_cand\">\r\n            <p className=\"inp_tit\">Candidates</p>\r\n            <div className=\"add_item_sect\">\r\n              <div className=\"add_item_sect_r1\">\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Choice Coin\"\r\n                  value={itemInp}\r\n                  onChange={(e) => setItemInp(e.target.value)}\r\n                />\r\n\r\n                <div className=\"item_img_preview\">\r\n                  {itemImg ? (\r\n                    <img src={itemImg} alt=\"\" />\r\n                  ) : (\r\n                    <i className=\"uil uil-image\" />\r\n                  )}\r\n                </div>\r\n\r\n                <input\r\n                  ref={itemImgPicker}\r\n                  hidden\r\n                  onChange={addItemImg}\r\n                  type=\"file\"\r\n                  accept=\".jpg, .jpeg, .png\"\r\n                />\r\n\r\n                <div\r\n                  className=\"add_butt\"\r\n                  onClick={() => itemImgPicker.current.click()}\r\n                >\r\n                  <p>Add Image</p>\r\n                </div>\r\n              </div>\r\n              <p className=\"ensure_txt\">\r\n                Entries must be of minimum length of one.\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"addItemButt\" onClick={() => addItem()}>\r\n              <p>Add Election Participant</p>\r\n            </div>\r\n          </div>\r\n\r\n          {items?.map((item, index) => (\r\n            <div className=\"item_list\" key={index}>\r\n              <div className=\"item_list_img\">\r\n                {item?.image ? (\r\n                  <img src={item?.image} alt=\"\" />\r\n                ) : (\r\n                  <i className=\"uil uil-asterisk\" />\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"item_list_name\">\r\n                <p>{item.name}</p>\r\n              </div>\r\n\r\n              <div className=\"rm_butt\" onClick={() => removeItem(item)}>\r\n                <p>Delete Participant</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n          <br />\r\n\r\n          <div className=\"crt_butt\">\r\n            <button onClick={createElection}>Create Election</button>\r\n            <p className=\"safety\">\r\n              <span>Safety disclaimer :</span> We never store your data.\r\n              Everything is encrypted.\r\n            </p>\r\n          </div>\r\n\r\n          {/* ************** */}\r\n        </div>\r\n\r\n        {/* **************** */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateElection;\r\n"]},"metadata":{},"sourceType":"module"}