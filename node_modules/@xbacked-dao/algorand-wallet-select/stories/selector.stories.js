"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Default = exports.ConfigureWallets = void 0;

var _react = _interopRequireDefault(require("react"));

var _ = require("../");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// More on default export: https://storybook.js.org/docs/react/writing-stories/introduction#default-export
var _default = {
  title: 'Algorand Wallet Selector',
  component: _.WalletSelector,
  // More on argTypes: https://storybook.js.org/docs/react/api/argtypes
  argTypes: {
    returnWallet: function returnWallet(data) {
      alert(JSON.stringify(data));
    }
  }
}; // More on component templates: https://storybook.js.org/docs/react/writing-stories/introduction#using-args

exports.default = _default;

var Template = function Template(args) {
  return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("h1", {
    className: "ws-text-lg"
  }, "Algorand Wallet Selector"), /*#__PURE__*/_react.default.createElement("a", {
    href: "https://xbacked.io",
    className: "ws-hover:underline"
  }, "Built with \uD83D\uDC9A by xBacked"), /*#__PURE__*/_react.default.createElement(_.WalletSelector, args));
};

var Default = Template.bind({}); // More on args: https://storybook.js.org/docs/react/writing-stories/args

exports.Default = Default;
Default.args = {
  returnWallet: function () {
    var _returnWallet = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!data) {
                _context.next = 8;
                break;
              }

              console.log(data.connector.check());
              _context.t0 = console;
              _context.next = 5;
              return data.connector.connect();

            case 5:
              _context.t1 = _context.sent;

              _context.t0.log.call(_context.t0, _context.t1);

              console.log(data.connector.provider);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function returnWallet(_x) {
      return _returnWallet.apply(this, arguments);
    }

    return returnWallet;
  }()
};
var ConfigureWallets = Template.bind({}); // More on args: https://storybook.js.org/docs/react/writing-stories/args

exports.ConfigureWallets = ConfigureWallets;
ConfigureWallets.args = {
  returnWallet: function () {
    var _returnWallet2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(data) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!data) {
                _context2.next = 8;
                break;
              }

              console.log(data.connector.check());
              _context2.t0 = console;
              _context2.next = 5;
              return data.connector.connect();

            case 5:
              _context2.t1 = _context2.sent;

              _context2.t0.log.call(_context2.t0, _context2.t1);

              console.log(data.connector.provider);

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function returnWallet(_x2) {
      return _returnWallet2.apply(this, arguments);
    }

    return returnWallet;
  }(),
  wallets: ['myalgowallet', 'walletconnect']
};