"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _client = _interopRequireDefault(require("@walletconnect/client"));

var _qrcodeModal = _interopRequireDefault(require("@walletconnect/qrcode-modal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var checkConnection = function checkConnection(connector) {
  return connector.connected;
};

var ConnectToWalletConnect = function ConnectToWalletConnect(opts) {
  var connector = new _client.default({
    bridge: "https://bridge.walletconnect.org",
    // Required 
    qrcodeModal: _qrcodeModal.default
  });
  return {
    provider: connector,
    connect: function () {
      var _connect = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return connector.createSession();

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function connect() {
        return _connect.apply(this, arguments);
      }

      return connect;
    }(),
    check: function check() {
      return checkConnection(connector);
    }
  };
};

var _default = ConnectToWalletConnect;
exports.default = _default;